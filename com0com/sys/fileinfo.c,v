head	1.4;
access;
symbols
	v3_0_0_0:1.4
	v2_2_2_0:1.4
	v2_2_1_0:1.3
	v2_2_0_0:1.3
	v2_1_0_0:1.3
	v2_0_0_0:1.3
	v1_8_0_0:1.2
	v1_7_0_0:1.2
	v1_6_0_0:1.2
	v1_5_0_0:1.1
	RELEASED:1.4
	v1_4_0_0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2009.09.21.08.41.33;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.09.15.51.18;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.21.16.23.57;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.28.10.06.42;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added missing Information = 0
(Thanks Kirill Bagrinovsky)
@
text
@/*
 * $Id: fileinfo.c,v 1.3 2007/11/09 15:51:18 vfrolov Exp $
 *
 * Copyright (c) 2005-2009 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: fileinfo.c,v $
 * Revision 1.3  2007/11/09 15:51:18  vfrolov
 * Added OutputBufferLength check
 *
 * Revision 1.2  2006/06/21 16:23:57  vfrolov
 * Fixed possible BSOD after one port of pair removal
 *
 * Revision 1.1  2005/09/28 10:06:42  vfrolov
 * Implemented IRP_MJ_QUERY_INFORMATION and IRP_MJ_SET_INFORMATION
 *
 */

#include "precomp.h"

/*
 * FILE_ID used by HALT_UNLESS to put it on BSOD
 */
#define FILE_ID 0xA

NTSTATUS FdoPortQueryInformation(PC0C_IO_PORT pIoPortLocal, IN PIRP pIrp)
{
  NTSTATUS status;

  pIrp->IoStatus.Information = 0;

  if ((pIoPortLocal->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pIoPortLocal->errors) {
    status = STATUS_CANCELLED;
  } else {
    PIO_STACK_LOCATION pIrpStack;

    pIrpStack = IoGetCurrentIrpStackLocation(pIrp);

    switch (pIrpStack->Parameters.QueryFile.FileInformationClass) {
    case FileStandardInformation:
      if (pIrpStack->Parameters.DeviceIoControl.OutputBufferLength < sizeof(FILE_STANDARD_INFORMATION)) {
         status = STATUS_BUFFER_TOO_SMALL;
         break;
      }
      RtlZeroMemory(pIrp->AssociatedIrp.SystemBuffer, sizeof(FILE_STANDARD_INFORMATION));
      pIrp->IoStatus.Information = sizeof(FILE_STANDARD_INFORMATION);
      status = STATUS_SUCCESS;
      break;
    case FilePositionInformation:
      if (pIrpStack->Parameters.DeviceIoControl.OutputBufferLength < sizeof(FILE_POSITION_INFORMATION)) {
         status = STATUS_BUFFER_TOO_SMALL;
         break;
      }
      RtlZeroMemory(pIrp->AssociatedIrp.SystemBuffer, sizeof(FILE_POSITION_INFORMATION));
      pIrp->IoStatus.Information = sizeof(FILE_POSITION_INFORMATION);
      status = STATUS_SUCCESS;
      break;
    default:
      status = STATUS_INVALID_PARAMETER;
    }
  }

  TraceIrp("FdoPortQueryInformation", pIrp, &status, TRACE_FLAG_PARAMS);

  pIrp->IoStatus.Status = status;
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);

  return status;
}

NTSTATUS FdoPortSetInformation(PC0C_IO_PORT pIoPortLocal, IN PIRP pIrp)
{
  NTSTATUS status;

  if ((pIoPortLocal->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pIoPortLocal->errors) {
    status = STATUS_CANCELLED;
  } else {
    PIO_STACK_LOCATION pIrpStack;

    pIrpStack = IoGetCurrentIrpStackLocation(pIrp);

    switch (pIrpStack->Parameters.QueryFile.FileInformationClass) {
    case FileEndOfFileInformation:
    case FileAllocationInformation:
      status = STATUS_SUCCESS;
      break;
    default:
      status = STATUS_INVALID_PARAMETER;
    }
  }

  TraceIrp("FdoPortSetInformation", pIrp, &status, TRACE_FLAG_PARAMS);

  pIrp->IoStatus.Information = 0;
  pIrp->IoStatus.Status = status;
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);

  return status;
}

NTSTATUS c0cFileInformation(IN PDEVICE_OBJECT pDevObj, IN PIRP pIrp)
{
  NTSTATUS status;
  PC0C_COMMON_EXTENSION pDevExt = pDevObj->DeviceExtension;
  ULONG code = IoGetCurrentIrpStackLocation(pIrp)->MajorFunction;

  switch (pDevExt->doType) {
  case C0C_DOTYPE_FP:
    if (code == IRP_MJ_QUERY_INFORMATION)
      status = FdoPortQueryInformation(((PC0C_FDOPORT_EXTENSION)pDevExt)->pIoPortLocal, pIrp);
    else
      status = FdoPortSetInformation(((PC0C_FDOPORT_EXTENSION)pDevExt)->pIoPortLocal, pIrp);
    break;
  default:
    status = STATUS_INVALID_DEVICE_REQUEST;
    pIrp->IoStatus.Information = 0;
    pIrp->IoStatus.Status = status;
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    TraceCode(pDevExt, "IRP_MJ_", codeNameTableIrpMj, code, &status);
  }

  return status;
}
@


1.3
log
@Added OutputBufferLength check
@
text
@d2 1
a2 1
 * $Id: fileinfo.c,v 1.2 2006/06/21 16:23:57 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2005-2007 Vyacheslav Frolov
d22 3
d44 2
a46 1
    pIrp->IoStatus.Information = 0;
a72 1
      pIrp->IoStatus.Information = 0;
@


1.2
log
@Fixed possible BSOD after one port of pair removal
@
text
@d2 1
a2 1
 * $Id: fileinfo.c,v 1.1 2005/09/28 10:06:42 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2005-2006 Vyacheslav Frolov
d22 3
a27 1
 *
d51 4
d60 4
@


1.1
log
@Implemented IRP_MJ_QUERY_INFORMATION and IRP_MJ_SET_INFORMATION
@
text
@d2 1
a2 1
 * $Id:$
d4 1
a4 1
 * Copyright (c) 2005 Vyacheslav Frolov
d21 4
a24 1
 * $Log:$
d35 1
a35 1
NTSTATUS FdoPortQueryInformation(PC0C_FDOPORT_EXTENSION pDevExt, IN PIRP pIrp)
d39 1
a39 1
  if ((pDevExt->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pDevExt->pIoPortLocal->errors) {
d72 1
a72 1
NTSTATUS FdoPortSetInformation(PC0C_FDOPORT_EXTENSION pDevExt, IN PIRP pIrp)
d76 1
a76 1
  if ((pDevExt->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pDevExt->pIoPortLocal->errors) {
d111 1
a111 1
      status = FdoPortQueryInformation((PC0C_FDOPORT_EXTENSION)pDevExt, pIrp);
d113 1
a113 1
      status = FdoPortSetInformation((PC0C_FDOPORT_EXTENSION)pDevExt, pIrp);
@

