head	1.12;
access;
symbols
	v3_0_0_0:1.12
	v2_2_2_0:1.11
	v2_2_1_0:1.11
	v2_2_0_0:1.11
	v2_1_0_0:1.10
	v2_0_0_0:1.9
	v1_8_0_0:1.8
	v1_7_0_0:1.4
	v1_6_0_0:1.4
	v1_5_0_0:1.1
	v1_4_0_0:1.1
	RELEASED:1.12
	v1_3_0_0:1.1;
locks; strict;
comment	@ * @;


1.12
date	2010.08.04.10.38.55;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.13.37.10;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.14.15.28.39;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.20.07.59.20;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.09.08.49.47;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.01.16.15.02;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.01.08.36.26;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.11.14.50.29;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.23.11.44.52;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.21.16.23.57;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.10.17.23;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.23.15.30.22;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Minimized PREfast noise
@
text
@/*
 * $Id: delay.c,v 1.11 2008/06/26 13:37:10 vfrolov Exp $
 *
 * Copyright (c) 2005-2010 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: delay.c,v $
 * Revision 1.11  2008/06/26 13:37:10  vfrolov
 * Implemented noise emulation
 *
 * Revision 1.10  2008/03/14 15:28:39  vfrolov
 * Implemented ability to get paired port settings with
 * extended IOCTL_SERIAL_LSRMST_INSERT
 *
 * Revision 1.9  2007/07/20 07:59:20  vfrolov
 * Fixed idleCount
 *
 * Revision 1.8  2007/06/09 08:49:47  vfrolov
 * Improved baudrate emulation
 *
 * Revision 1.7  2007/06/01 16:15:02  vfrolov
 * Fixed previous fix
 *
 * Revision 1.6  2007/06/01 08:36:26  vfrolov
 * Changed parameter type for SetWriteDelay()
 *
 * Revision 1.5  2007/01/11 14:50:29  vfrolov
 * Pool functions replaced by
 *   C0C_ALLOCATE_POOL()
 *   C0C_ALLOCATE_POOL_WITH_QUOTA()
 *   C0C_FREE_POOL()
 *
 * Revision 1.4  2006/06/23 11:44:52  vfrolov
 * Mass replacement pDevExt by pIoPort
 *
 * Revision 1.3  2006/06/21 16:23:57  vfrolov
 * Fixed possible BSOD after one port of pair removal
 *
 * Revision 1.2  2006/01/10 10:17:23  vfrolov
 * Implemented flow control and handshaking
 * Implemented IOCTL_SERIAL_SET_XON and IOCTL_SERIAL_SET_XOFF
 * Added setting of HoldReasons, WaitForImmediate and AmountInOutQueue
 *   fields of SERIAL_STATUS for IOCTL_SERIAL_GET_COMMSTATUS
 *
 * Revision 1.1  2005/08/23 15:30:22  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"
#include "delay.h"
#include "noise.h"

/*
 * FILE_ID used by HALT_UNLESS to put it on BSOD
 */
#define FILE_ID 7

KDEFERRED_ROUTINE WriteDelayRoutine;
VOID WriteDelayRoutine(
    IN PKDPC pDpc,
    IN PVOID deferredContext,
    IN PVOID systemArgument1,
    IN PVOID systemArgument2)
{
  PC0C_IO_PORT pIoPort;
  PC0C_ADAPTIVE_DELAY pWriteDelay;

  UNREFERENCED_PARAMETER(pDpc);
  UNREFERENCED_PARAMETER(systemArgument1);
  UNREFERENCED_PARAMETER(systemArgument2);

  HALT_UNLESS(deferredContext != NULL);

  pIoPort = (PC0C_IO_PORT)deferredContext;
  pWriteDelay = pIoPort->pWriteDelay;

  if (pWriteDelay) {
    LIST_ENTRY queueToComplete;
    KIRQL oldIrql;

    InitializeListHead(&queueToComplete);

    KeAcquireSpinLock(pIoPort->pIoLock, &oldIrql);

    if (pWriteDelay->started) {
      pWriteDelay->idleCount++;

      ReadWrite(
          pIoPort->pIoPortRemote, FALSE,
          pIoPort, FALSE,
          &queueToComplete);

      if (pWriteDelay->idleCount > 3) {
        if (pIoPort->brokeCharsProbability > 0 && pIoPort->pIoPortRemote->isOpen) {
          SIZE_T idleChars = GetWriteLimit(pWriteDelay);

          pWriteDelay->idleCount = 0;
          pIoPort->brokeIdleChars += GetBrokenChars(pIoPort->brokeCharsProbability, idleChars);
          pWriteDelay->sentFrames += idleChars;

          if (pIoPort->brokeIdleChars > 0) {
            ReadWrite(
                pIoPort->pIoPortRemote, FALSE,
                pIoPort, FALSE,
                &queueToComplete);
          }
        } else {
          StopWriteDelayTimer(pWriteDelay);
        }
      }
    }

    KeReleaseSpinLock(pIoPort->pIoLock, oldIrql);

    FdoPortCompleteQueue(&queueToComplete);
  }
}

SIZE_T GetWriteLimit(PC0C_ADAPTIVE_DELAY pWriteDelay)
{
  ULONGLONG curTime;
  ULONGLONG maxFrames;

  HALT_UNLESS(pWriteDelay);

  curTime = KeQueryInterruptTime();

  HALT_UNLESS(pWriteDelay->params.decibits_per_frame);

  maxFrames = ((curTime - pWriteDelay->startTime) * pWriteDelay->params.baudRate)/
          (pWriteDelay->params.decibits_per_frame * 1000000L);

  if (maxFrames < pWriteDelay->sentFrames)
    return 0;

  return (SIZE_T)(maxFrames - pWriteDelay->sentFrames);
}

NTSTATUS AllocWriteDelay(PC0C_IO_PORT pIoPort)
{
  PC0C_ADAPTIVE_DELAY pWriteDelay;

  pWriteDelay = (PC0C_ADAPTIVE_DELAY)C0C_ALLOCATE_POOL(NonPagedPool, sizeof(*pWriteDelay));

  if (!pWriteDelay)
    return STATUS_INSUFFICIENT_RESOURCES;

  RtlZeroMemory(pWriteDelay, sizeof(*pWriteDelay));

  KeInitializeTimer(&pWriteDelay->timer);
  KeInitializeDpc(&pWriteDelay->timerDpc, WriteDelayRoutine, pIoPort);

  pIoPort->pWriteDelay = pWriteDelay;

  return STATUS_SUCCESS;
}

VOID FreeWriteDelay(PC0C_IO_PORT pIoPort)
{
  PC0C_ADAPTIVE_DELAY pWriteDelay;

  pWriteDelay = pIoPort->pWriteDelay;

  if (pWriteDelay) {
    pIoPort->pWriteDelay = NULL;
    StopWriteDelayTimer(pWriteDelay);
    C0C_FREE_POOL(pWriteDelay);
  }
}

VOID SetWriteDelay(PC0C_IO_PORT pIoPort)
{
  PC0C_ADAPTIVE_DELAY pWriteDelay;
  C0C_DELAY_PARAMS params;

  pWriteDelay = pIoPort->pWriteDelay;

  if (!pWriteDelay)
    return;

  params.baudRate = pIoPort->baudRate.BaudRate;

  /* Startbit + WordLength */
  params.decibits_per_frame = (1 + pIoPort->lineControl.WordLength) * 10;

  switch (pIoPort->lineControl.Parity) {
  case NO_PARITY:
    break;
  default:
  case ODD_PARITY:
  case EVEN_PARITY:
  case MARK_PARITY:
  case SPACE_PARITY:
    params.decibits_per_frame += 10;
    break;
  }

  switch (pIoPort->lineControl.StopBits) {
  default:
  case STOP_BIT_1:
    params.decibits_per_frame += 10;
    break;
  case STOP_BITS_1_5:
    params.decibits_per_frame += 15;
    break;
  case STOP_BITS_2:
    params.decibits_per_frame += 30;
    break;
  }

  if (pWriteDelay->params.baudRate != params.baudRate ||
      pWriteDelay->params.decibits_per_frame != params.decibits_per_frame)
  {
    pWriteDelay->params = params;
    if (pWriteDelay->started) {
      StopWriteDelayTimer(pWriteDelay);
      StartWriteDelayTimer(pWriteDelay);
    }
  }
}

VOID StartWriteDelayTimer(PC0C_ADAPTIVE_DELAY pWriteDelay)
{
  LARGE_INTEGER dueTime;
  ULONG period;
  ULONG intervals_100ns;

  if (pWriteDelay->started)
    return;

  if (!pWriteDelay->params.baudRate)
    return;

  pWriteDelay->startTime = KeQueryInterruptTime();
  pWriteDelay->sentFrames = 0;
  pWriteDelay->idleCount = 0;

  /* 100-nanosecond intervals per frame */
  intervals_100ns = (pWriteDelay->params.decibits_per_frame * 1000000L)/pWriteDelay->params.baudRate;

  if (!intervals_100ns)
    intervals_100ns = 1;

  period = intervals_100ns/10000;  /* 1-millisecond intervals per frame */

  dueTime.QuadPart = -(LONGLONG)intervals_100ns;

  if (!period)
    period = 1;

  KeSetTimerEx(
      &pWriteDelay->timer,
      dueTime, period,
      &pWriteDelay->timerDpc);

  pWriteDelay->started = TRUE;
}

VOID StopWriteDelayTimer(PC0C_ADAPTIVE_DELAY pWriteDelay)
{
  pWriteDelay->started = FALSE;
  KeCancelTimer(&pWriteDelay->timer);
  KeRemoveQueueDpc(&pWriteDelay->timerDpc);
}
@


1.11
log
@Implemented noise emulation
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.10 2008/03/14 15:28:39 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2005-2008 Vyacheslav Frolov
d22 3
d73 1
d87 2
@


1.10
log
@Implemented ability to get paired port settings with
extended IOCTL_SERIAL_LSRMST_INSERT
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.9 2007/07/20 07:59:20 vfrolov Exp $
d22 4
a58 1
 *
d63 1
d102 15
a116 1
      if (pWriteDelay->idleCount > 3)
d118 2
@


1.9
log
@Fixed idleCount
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.8 2007/06/09 08:49:47 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2005-2007 Vyacheslav Frolov
d22 3
d160 1
a160 1
VOID SetWriteDelay(PC0C_FDOPORT_EXTENSION pDevExt)
a162 1
  KIRQL oldIrql;
a163 1
  SERIAL_LINE_CONTROL lineControl;
d165 1
a165 1
  pWriteDelay = pDevExt->pIoPortLocal->pWriteDelay;
d170 1
a170 6
  KeAcquireSpinLock(pDevExt->pIoPortLocal->pIoLock, &oldIrql);

  KeAcquireSpinLockAtDpcLevel(&pDevExt->controlLock);
  lineControl = pDevExt->lineControl;
  params.baudRate = pDevExt->baudRate.BaudRate;
  KeReleaseSpinLockFromDpcLevel(&pDevExt->controlLock);
d173 1
a173 1
  params.decibits_per_frame = (1 + lineControl.WordLength) * 10;
d175 1
a175 1
  switch (lineControl.Parity) {
d187 1
a187 1
  switch (lineControl.StopBits) {
a208 2

  KeReleaseSpinLock(pDevExt->pIoPortLocal->pIoLock, oldIrql);
@


1.8
log
@Improved baudrate emulation
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.7 2007/06/01 16:15:02 vfrolov Exp $
d22 3
d88 1
a88 1
      NTSTATUS status;
d90 1
a90 1
      status = ReadWrite(
d95 1
a95 2
      if (status != STATUS_PENDING) {
        if (++pWriteDelay->idleCount > 3)
a96 3
      } else {
        pWriteDelay->idleCount = 0;
      }
@


1.7
log
@Fixed previous fix
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.6 2007/06/01 08:36:26 vfrolov Exp $
d22 3
d92 6
a97 2
      if (status != STATUS_PENDING)
        StopWriteDelayTimer(pWriteDelay);
d232 1
@


1.6
log
@Changed parameter type for SetWriteDelay()
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.5 2007/01/11 14:50:29 vfrolov Exp $
d22 3
d163 3
a165 1
  KeAcquireSpinLock(&pDevExt->controlLock, &oldIrql);
d168 1
a168 3
  KeReleaseSpinLock(&pDevExt->controlLock, oldIrql);

  KeAcquireSpinLock(pDevExt->pIoPortLocal->pIoLock, &oldIrql);
@


1.5
log
@Pool functions replaced by
  C0C_ALLOCATE_POOL()
  C0C_ALLOCATE_POOL_WITH_QUOTA()
  C0C_FREE_POOL()
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.4 2006/06/23 11:44:52 vfrolov Exp $
d22 6
d148 1
a148 1
VOID SetWriteDelay(PC0C_IO_PORT pIoPort)
a153 1
  PC0C_FDOPORT_EXTENSION pDevExt;
d155 1
a155 1
  pWriteDelay = pIoPort->pWriteDelay;
d160 1
a160 6
  KeAcquireSpinLock(pIoPort->pIoLock, &oldIrql);

  pDevExt = pIoPort->pDevExt;
  HALT_UNLESS(pDevExt);

  KeAcquireSpinLockAtDpcLevel(&pDevExt->controlLock);
d163 3
a165 1
  KeReleaseSpinLockFromDpcLevel(&pDevExt->controlLock);
d205 1
a205 1
  KeReleaseSpinLock(pIoPort->pIoLock, oldIrql);
@


1.4
log
@Mass replacement pDevExt by pIoPort
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.3 2006/06/21 16:23:57 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2005-2006 Vyacheslav Frolov
d22 3
d114 1
a114 1
  pWriteDelay = (PC0C_ADAPTIVE_DELAY)ExAllocatePool(NonPagedPool, sizeof(*pWriteDelay));
d138 1
a138 1
    ExFreePool(pWriteDelay);
@


1.3
log
@Fixed possible BSOD after one port of pair removal
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.2 2006/01/10 10:17:23 vfrolov Exp $
d22 3
d139 1
a139 1
VOID SetWriteDelay(IN PC0C_FDOPORT_EXTENSION pDevExt)
d145 1
d147 1
a147 1
  pWriteDelay = pDevExt->pIoPortLocal->pWriteDelay;
d152 4
a155 1
  KeAcquireSpinLock(pDevExt->pIoLock, &oldIrql);
d200 1
a200 1
  KeReleaseSpinLock(pDevExt->pIoLock, oldIrql);
@


1.2
log
@Implemented flow control and handshaking
Implemented IOCTL_SERIAL_SET_XON and IOCTL_SERIAL_SET_XOFF
Added setting of HoldReasons, WaitForImmediate and AmountInOutQueue
  fields of SERIAL_STATUS for IOCTL_SERIAL_GET_COMMSTATUS
@
text
@d2 1
a2 1
 * $Id: delay.c,v 1.1 2005/08/23 15:30:22 vfrolov Exp $
d22 6
d48 1
a48 1
  PC0C_FDOPORT_EXTENSION pDevExt;
d55 2
a56 2
  pDevExt = (PC0C_FDOPORT_EXTENSION)deferredContext;
  pWriteDelay = pDevExt->pIoPortLocal->pWriteDelay;
d64 1
a64 1
    KeAcquireSpinLock(pDevExt->pIoLock, &oldIrql);
d70 2
a71 2
          pDevExt->pIoPortRemote, FALSE,
          pDevExt->pIoPortLocal, FALSE,
d78 1
a78 1
    KeReleaseSpinLock(pDevExt->pIoLock, oldIrql);
d104 1
a104 1
NTSTATUS AllocWriteDelay(IN PC0C_FDOPORT_EXTENSION pDevExt)
d116 1
a116 1
  KeInitializeDpc(&pWriteDelay->timerDpc, WriteDelayRoutine, pDevExt);
d118 1
a118 1
  pDevExt->pIoPortLocal->pWriteDelay = pWriteDelay;
d123 1
a123 1
VOID FreeWriteDelay(IN PC0C_FDOPORT_EXTENSION pDevExt)
d127 1
a127 1
  pWriteDelay = pDevExt->pIoPortLocal->pWriteDelay;
d130 1
a130 1
    pDevExt->pIoPortLocal->pWriteDelay = NULL;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id:$
d4 1
a4 1
 * Copyright (c) 2005 Vyacheslav Frolov
d21 4
a24 1
 * $Log:$
d64 2
a65 6
          pDevExt->pIoPortRemote,
          &pDevExt->pIoPortRemote->irpQueues[C0C_QUEUE_READ],
          FALSE,
          pDevExt->pIoPortLocal,
          &pDevExt->pIoPortLocal->irpQueues[C0C_QUEUE_WRITE],
          FALSE,
@

