head	1.10;
access;
symbols
	v3_0_0_0:1.10
	v2_2_2_0:1.10
	v2_2_1_0:1.10
	v2_2_0_0:1.10
	v2_1_0_0:1.9
	v2_0_0_0:1.9
	v1_8_0_0:1.9
	v1_7_0_0:1.8
	v1_6_0_0:1.8
	v1_5_0_0:1.5
	v1_4_0_0:1.4
	RELEASED:1.10
	v1_3_0_0:1.2
	v1_2_0_0:1.1
	v1_1_1_0:1.1
	v1_1_0_0:1.1
	v1_0_0_0:1.1;
locks; strict;
comment	@ * @;


1.10
date	2008.12.02.16.10.09;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.20.12.05.11;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.23.11.44.52;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.21.16.23.57;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.10.10.17.23;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.05.10.54.56;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.13.14.56.16;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.06.07.23.44;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.23.15.49.21;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.26.12.18.54;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Separated tracing and debuging
@
text
@/*
 * $Id: write.c,v 1.9 2007/02/20 12:05:11 vfrolov Exp $
 *
 * Copyright (c) 2004-2008 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: write.c,v $
 * Revision 1.9  2007/02/20 12:05:11  vfrolov
 * Implemented IOCTL_SERIAL_XOFF_COUNTER
 * Fixed cancel and timeout routines
 *
 * Revision 1.8  2006/06/23 11:44:52  vfrolov
 * Mass replacement pDevExt by pIoPort
 *
 * Revision 1.7  2006/06/21 16:23:57  vfrolov
 * Fixed possible BSOD after one port of pair removal
 *
 * Revision 1.6  2006/01/10 10:17:23  vfrolov
 * Implemented flow control and handshaking
 * Implemented IOCTL_SERIAL_SET_XON and IOCTL_SERIAL_SET_XOFF
 * Added setting of HoldReasons, WaitForImmediate and AmountInOutQueue
 *   fields of SERIAL_STATUS for IOCTL_SERIAL_GET_COMMSTATUS
 *
 * Revision 1.5  2005/12/05 10:54:56  vfrolov
 * Implemented IOCTL_SERIAL_IMMEDIATE_CHAR
 *
 * Revision 1.4  2005/09/13 14:56:16  vfrolov
 * Implemented IRP_MJ_FLUSH_BUFFERS
 *
 * Revision 1.3  2005/09/06 07:23:44  vfrolov
 * Implemented overrun emulation
 *
 * Revision 1.2  2005/08/23 15:49:21  vfrolov
 * Implemented baudrate emulation
 *
 * Revision 1.1  2005/01/26 12:18:54  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"

NTSTATUS StartIrpWrite(
    IN PC0C_IO_PORT pIoPort,
    IN PLIST_ENTRY pQueueToComplete)
{
  return ReadWrite(
      pIoPort->pIoPortRemote, FALSE,
      pIoPort, TRUE,
      pQueueToComplete);
}

NTSTATUS FdoPortImmediateChar(
    IN PC0C_IO_PORT pIoPort,
    IN PIRP pIrp,
    IN PIO_STACK_LOCATION pIrpStack)
{
  if (pIrpStack->Parameters.DeviceIoControl.InputBufferLength < sizeof(UCHAR))
    return STATUS_BUFFER_TOO_SMALL;

  return FdoPortStartIrp(pIoPort, pIrp, C0C_QUEUE_WRITE, StartIrpWrite);
}

NTSTATUS FdoPortXoffCounter(
    IN PC0C_IO_PORT pIoPort,
    IN PIRP pIrp,
    IN PIO_STACK_LOCATION pIrpStack)
{
  PSERIAL_XOFF_COUNTER pXoffCounter;

  if (pIrpStack->Parameters.DeviceIoControl.InputBufferLength < sizeof(SERIAL_XOFF_COUNTER))
    return STATUS_BUFFER_TOO_SMALL;

  pXoffCounter = (PSERIAL_XOFF_COUNTER)pIrp->AssociatedIrp.SystemBuffer;

  if (pXoffCounter->Counter <= 0)
    return STATUS_INVALID_PARAMETER;

  return FdoPortStartIrp(pIoPort, pIrp, C0C_QUEUE_WRITE, StartIrpWrite);
}

NTSTATUS FdoPortWrite(IN PC0C_IO_PORT pIoPort, IN PIRP pIrp)
{
  NTSTATUS status;

  pIrp->IoStatus.Information = 0;

  if ((pIoPort->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pIoPort->errors) {
    status = STATUS_CANCELLED;
  } else {
    if (IoGetCurrentIrpStackLocation(pIrp)->MajorFunction == IRP_MJ_FLUSH_BUFFERS ||
                         IoGetCurrentIrpStackLocation(pIrp)->Parameters.Write.Length)
      status = FdoPortStartIrp(pIoPort, pIrp, C0C_QUEUE_WRITE, StartIrpWrite);
    else
      status = STATUS_SUCCESS;
  }

  if (status != STATUS_PENDING) {
    TraceIrp("FdoPortWrite", pIrp, &status, TRACE_FLAG_RESULTS);
    pIrp->IoStatus.Status = status;
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  }

  return status;
}

NTSTATUS c0cWrite(IN PDEVICE_OBJECT pDevObj, IN PIRP pIrp)
{
  NTSTATUS status;
  PC0C_COMMON_EXTENSION pDevExt = pDevObj->DeviceExtension;

#if ENABLE_TRACING
  ULONG code = IoGetCurrentIrpStackLocation(pIrp)->MajorFunction;
#endif /* ENABLE_TRACING */

  TraceIrp("c0cWrite", pIrp, NULL, TRACE_FLAG_PARAMS);

  switch (pDevExt->doType) {
  case C0C_DOTYPE_FP:
    status = FdoPortWrite(((PC0C_FDOPORT_EXTENSION)pDevExt)->pIoPortLocal, pIrp);
    break;
  default:
    status = STATUS_INVALID_DEVICE_REQUEST;
    pIrp->IoStatus.Information = 0;
    pIrp->IoStatus.Status = status;
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  }

  if (!NT_SUCCESS(status))
    TraceCode(pDevExt, "IRP_MJ_", codeNameTableIrpMj, code, &status);

  return status;
}
@


1.9
log
@Implemented IOCTL_SERIAL_XOFF_COUNTER
Fixed cancel and timeout routines
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.8 2006/06/23 11:44:52 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2004-2007 Vyacheslav Frolov
d22 4
d126 1
a126 1
#if DBG
d128 1
a128 1
#endif /* DBG */
@


1.8
log
@Mass replacement pDevExt by pIoPort
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.7 2006/06/21 16:23:57 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2004-2006 Vyacheslav Frolov
d22 3
d74 18
@


1.7
log
@Fixed possible BSOD after one port of pair removal
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.6 2006/01/10 10:17:23 vfrolov Exp $
d22 3
d51 1
a51 1
    IN PC0C_FDOPORT_EXTENSION pDevExt,
d55 2
a56 2
      pDevExt->pIoPortLocal->pIoPortRemote, FALSE,
      pDevExt->pIoPortLocal, TRUE,
d61 1
a61 1
    IN PC0C_FDOPORT_EXTENSION pDevExt,
d68 1
a68 1
  return FdoPortStartIrp(pDevExt, pIrp, C0C_QUEUE_WRITE, StartIrpWrite);
d71 1
a71 1
NTSTATUS FdoPortWrite(IN PC0C_FDOPORT_EXTENSION pDevExt, IN PIRP pIrp)
d77 1
a77 1
  if ((pDevExt->pIoPortLocal->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pDevExt->pIoPortLocal->errors) {
d82 1
a82 1
      status = FdoPortStartIrp(pDevExt, pIrp, C0C_QUEUE_WRITE, StartIrpWrite);
d109 1
a109 1
    status = FdoPortWrite((PC0C_FDOPORT_EXTENSION)pDevExt, pIrp);
@


1.6
log
@Implemented flow control and handshaking
Implemented IOCTL_SERIAL_SET_XON and IOCTL_SERIAL_SET_XOFF
Added setting of HoldReasons, WaitForImmediate and AmountInOutQueue
  fields of SERIAL_STATUS for IOCTL_SERIAL_GET_COMMSTATUS
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.5 2005/12/05 10:54:56 vfrolov Exp $
d22 6
d52 1
a52 1
      pDevExt->pIoPortRemote, FALSE,
d74 1
a74 1
  if ((pDevExt->handFlow.ControlHandShake & SERIAL_ERROR_ABORT) && pDevExt->pIoPortLocal->errors) {
@


1.5
log
@Implemented IOCTL_SERIAL_IMMEDIATE_CHAR
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.4 2005/09/13 14:56:16 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2004-2005 Vyacheslav Frolov
d22 3
d46 2
a47 6
      pDevExt->pIoPortRemote,
      &pDevExt->pIoPortRemote->irpQueues[C0C_QUEUE_READ],
      FALSE,
      pDevExt->pIoPortLocal,
      &pDevExt->pIoPortLocal->irpQueues[C0C_QUEUE_WRITE],
      TRUE,
@


1.4
log
@Implemented IRP_MJ_FLUSH_BUFFERS
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.3 2005/09/06 07:23:44 vfrolov Exp $
d22 3
d52 11
@


1.3
log
@Implemented overrun emulation
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.2 2005/08/23 15:49:21 vfrolov Exp $
d22 3
d58 2
a59 1
    if (IoGetCurrentIrpStackLocation(pIrp)->Parameters.Write.Length)
@


1.2
log
@Implemented baudrate emulation
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.1 2005/01/26 12:18:54 vfrolov Exp $
d22 3
a27 1
 *
a48 1
  PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(pIrp);
d52 8
a59 4
  if (pIrpStack->Parameters.Write.Length)
    status = FdoPortStartIrp(pDevExt, pIrp, C0C_QUEUE_WRITE, StartIrpWrite);
  else
    status = STATUS_SUCCESS;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: write.c,v 1.1 2005/01/24 15:26:46 frolov Exp $
d22 3
a28 1
#include "timeout.h"
d34 8
a41 15
  NTSTATUS status;
  PIRP pIrp;

  pIrp = pDevExt->pIoPortLocal->irpQueues[C0C_QUEUE_WRITE].pCurrent;

  status = FdoPortIo(C0C_IO_TYPE_WRITE,
                     pIrp,
                     pDevExt->pIoPortRemote,
                     &pDevExt->pIoPortRemote->irpQueues[C0C_QUEUE_READ],
                     pQueueToComplete);

  if (status == STATUS_PENDING)
    status = FdoPortSetIrpTimeout(pDevExt, pIrp);

  return status;
@

