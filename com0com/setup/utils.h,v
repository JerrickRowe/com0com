head	1.9;
access;
symbols
	v3_0_0_0:1.9
	v2_2_2_0:1.7
	v2_2_1_0:1.7
	v2_2_0_0:1.5
	v2_1_0_0:1.5
	v2_0_0_0:1.5
	v1_8_0_0:1.4
	RELEASED:1.9
	v1_7_0_0:1.3;
locks; strict;
comment	@ * @;


1.9
date	2011.12.15.15.51.48;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.30.09.15.04;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.25.16.56.25;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.24.15.22.44;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.25.12.28.22;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.11.15.03.43;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.03.13.17.28;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.02.16.09.13;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.28.12.16.43;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fixed types
@
text
@/*
 * $Id: utils.h,v 1.8 2010/07/30 09:15:04 vfrolov Exp $
 *
 * Copyright (c) 2006-2011 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: utils.h,v $
 * Revision 1.8  2010/07/30 09:15:04  vfrolov
 * Added STRDUP()
 *
 * Revision 1.7  2008/12/25 16:56:25  vfrolov
 * Added MatchPattern()
 *
 * Revision 1.6  2008/12/24 15:22:44  vfrolov
 * Added BusyMask::Clear() and BusyMask::DelNum()
 *
 * Revision 1.5  2007/09/25 12:28:22  vfrolov
 * Implemented Stack class
 *
 * Revision 1.4  2007/01/11 15:03:43  vfrolov
 * Added STRTOK_R()
 *
 * Revision 1.3  2006/11/03 13:17:28  vfrolov
 * Fixed LocalReAlloc() usage
 * Added return value to BusyMask::AddNum()
 *
 * Revision 1.2  2006/11/02 16:09:13  vfrolov
 * Added StrToInt() and class BusyMask
 *
 * Revision 1.1  2006/07/28 12:16:43  vfrolov
 * Initial revision
 *
 */

#ifndef _C0C_UTILS_H_
#define _C0C_UTILS_H_

///////////////////////////////////////////////////////////////
int VSNPRINTF(char *pBuf, int size, const char *pFmt, va_list va);
int SNPRINTF(char *pBuf, int size, const char *pFmt, ...);
char *STRTOK_R(char *pStr, const char *pDelims, char **ppSave);
bool StrToInt(const char *pStr, int *pNum);
bool MatchPattern(const char *pPattern, const char *pStr);
char *STRDUP(const char *pSrcStr, bool showErrors = TRUE);
///////////////////////////////////////////////////////////////
class BusyMask {
public:
  BusyMask() : pBusyMask(NULL), busyMaskLen(0) {}
  ~BusyMask() { Clear(); }

  void Clear();
  bool AddNum(int num);
  void DelNum(int num);
  bool IsFreeNum(int num) const;
  int GetFirstFreeNum() const;
private:
  PBYTE pBusyMask;
  SIZE_T busyMaskLen;
};

class StackEl {
public:
  StackEl(PVOID _pData) : pData(_pData), pNext(NULL) {}
  PVOID pData;
private:
  StackEl *pNext;

  friend class Stack;
};

class Stack {
public:
  Stack() : pFirst(NULL) {}
  bool Push(StackEl *pElem)
  {
    if (!pElem)
      return FALSE;
    pElem->pNext = pFirst;
    pFirst = pElem;
    return TRUE;
  }
  StackEl *Pop()
  {
    StackEl *pTop = pFirst;
    if (pTop) {
      pFirst = pTop->pNext;
      pTop->pNext = NULL;
    }
    return pTop;
  }
private:
  StackEl *pFirst;
};
///////////////////////////////////////////////////////////////

#endif /* _C0C_UTILS_H_ */
@


1.8
log
@Added STRDUP()
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.7 2008/12/25 16:56:25 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2008 Vyacheslav Frolov
d22 3
d56 3
a58 3
BOOL StrToInt(const char *pStr, int *pNum);
BOOL MatchPattern(const char *pPattern, const char *pStr);
char *STRDUP(const char *pSrcStr, BOOL showErrors = TRUE);
d66 1
a66 1
  BOOL AddNum(int num);
d68 1
a68 1
  BOOL IsFreeNum(int num) const;
d88 1
a88 1
  BOOL Push(StackEl *pElem)
@


1.7
log
@Added MatchPattern()
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.6 2008/12/24 15:22:44 vfrolov Exp $
d22 3
d49 1
d55 2
a56 1

d105 1
@


1.6
log
@Added BusyMask::Clear() and BusyMask::DelNum()
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.5 2007/09/25 12:28:22 vfrolov Exp $
d22 3
d50 1
@


1.5
log
@Implemented Stack class
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.4 2007/01/11 15:03:43 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2007 Vyacheslav Frolov
d22 3
d51 1
a51 1
  ~BusyMask();
d53 1
d55 1
@


1.4
log
@Added STRTOK_R()
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.3 2006/11/03 13:17:28 vfrolov Exp $
d22 3
d58 34
@


1.3
log
@Fixed LocalReAlloc() usage
Added return value to BusyMask::AddNum()
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.2 2006/11/02 16:09:13 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006 Vyacheslav Frolov
d22 4
d39 1
@


1.2
log
@Added StrToInt() and class BusyMask
@
text
@d2 1
a2 1
 * $Id: utils.h,v 1.1 2006/07/28 12:16:43 vfrolov Exp $
d22 3
a27 1
 *
d42 1
a42 1
  void AddNum(int num);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: $
d21 4
a24 1
 * $Log: $
d33 14
@

