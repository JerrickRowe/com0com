head	1.14;
access;
symbols
	v3_0_0_0:1.14
	v2_2_2_0:1.7
	v2_2_1_0:1.7
	v2_2_0_0:1.6
	v2_1_0_0:1.6
	v2_0_0_0:1.6
	v1_8_0_0:1.3
	RELEASED:1.14
	v1_7_0_0:1.3;
locks; strict;
comment	@ * @;


1.14
date	2012.01.10.11.24.27;	author vfrolov;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.15.15.51.48;	author vfrolov;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.13.17.39.56;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.29.12.18.43;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.15.18.11.10;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.07.07.03.31;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.27.11.16.46;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.11.07.35.22;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.01.15.01.35;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.25.12.42.49;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.17.14.35.06;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.10.14.07.40;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.02.16.20.44;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.28.12.16.43;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Added ability to repeate waiting for no pending device
installation activities
@
text
@/*
 * $Id: devutils.h,v 1.13 2011/12/15 15:51:48 vfrolov Exp $
 *
 * Copyright (c) 2006-2012 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: devutils.h,v $
 * Revision 1.13  2011/12/15 15:51:48  vfrolov
 * Fixed types
 *
 * Revision 1.12  2011/07/13 17:39:56  vfrolov
 * Fixed result treatment of UpdateDriverForPlugAndPlayDevices()
 *
 * Revision 1.11  2010/07/29 12:18:43  vfrolov
 * Fixed waiting stuff
 *
 * Revision 1.10  2010/07/15 18:11:10  vfrolov
 * Fixed --wait option for Ports class
 *
 * Revision 1.9  2010/06/07 07:03:31  vfrolov
 * Added wrapper UpdateDriver() for UpdateDriverForPlugAndPlayDevices()
 *
 * Revision 1.8  2010/05/27 11:16:46  vfrolov
 * Added ability to put the port to the Ports class
 *
 * Revision 1.7  2009/02/11 07:35:22  vfrolov
 * Added --no-update option
 *
 * Revision 1.6  2007/10/01 15:01:35  vfrolov
 * Added pDevInstID parameter to InstallDevice()
 *
 * Revision 1.5  2007/09/25 12:42:49  vfrolov
 * Fixed update command (bug if multiple pairs active)
 * Fixed uninstall command (restore active ports on cancell)
 *
 * Revision 1.4  2007/09/17 14:35:06  vfrolov
 * Fixed typo
 *
 * Revision 1.3  2006/11/10 14:07:40  vfrolov
 * Implemented remove command
 *
 * Revision 1.2  2006/11/02 16:20:44  vfrolov
 * Added usage the fixed port numbers
 *
 * Revision 1.1  2006/07/28 12:16:43  vfrolov
 * Initial revision
 *
 */

#ifndef _C0C_DEVUTILS_H_
#define _C0C_DEVUTILS_H_

///////////////////////////////////////////////////////////////
class DevProperties {
  public:
    DevProperties() : pDevId(NULL), pPhObjName(NULL), pLocation(NULL) {}
    DevProperties(const DevProperties &o)
      : pDevId(NULL), pPhObjName(NULL), pLocation(NULL) { *this = o; }
    ~DevProperties() { DevId(NULL); PhObjName(NULL); Location(NULL); }

    DevProperties &operator=(const DevProperties &o)
    {
      DevId(o.DevId()); PhObjName(o.PhObjName()); Location(o.Location());
      return *this;
    }

    const char *DevId(const char *_pDevId);
    const char *PhObjName(const char *_pPhObjName);
    const char *Location(const char *_pLocation);

    const char *DevId() const { return pDevId; }
    const char *PhObjName() const { return pPhObjName; }
    const char *Location() const { return pLocation; }

  private:
    char *pDevId;
    char *pPhObjName;
    char *pLocation;
};

typedef const DevProperties *PCDevProperties;

class Stack;

///////////////////////////////////////////////////////////////
typedef bool CNC_DEV_CALLBACK(
    HDEVINFO hDevInfo,
    PSP_DEVINFO_DATA pDevInfoData,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired,
    void *pParam);

typedef CNC_DEV_CALLBACK *PCNC_DEV_CALLBACK;
///////////////////////////////////////////////////////////////
typedef bool CNC_ENUM_FILTER(const char *pHardwareId);
typedef CNC_ENUM_FILTER *PCNC_ENUM_FILTER;
///////////////////////////////////////////////////////////////
int EnumDevices(
    PCNC_ENUM_FILTER pFilter,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired,
    PCNC_DEV_CALLBACK pDevCallBack,
    void *pDevCallBackParam);

int DisableDevice(
    HDEVINFO hDevInfo,
    PSP_DEVINFO_DATA pDevInfoData,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired,
    Stack *pDevPropertiesStack);

bool DisableDevices(
    PCNC_ENUM_FILTER pFilter,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired,
    Stack *pDevPropertiesStack);

bool EnableDevices(
    PCNC_ENUM_FILTER pFilter,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired);

bool RestartDevices(
    PCNC_ENUM_FILTER pFilter,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired);

bool RemoveDevice(
    HDEVINFO hDevInfo,
    PSP_DEVINFO_DATA pDevInfoData,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired);

bool RemoveDevices(
    PCNC_ENUM_FILTER pFilter,
    PCDevProperties pDevProperties,
    BOOL *pRebootRequired);

bool ReenumerateDeviceNode(
    PSP_DEVINFO_DATA pDevInfoData);

int UpdateDriver(
    const char *pInfFilePath,
    const char *pHardwareId,
    DWORD flags,
    bool mandatory,
    BOOL *pRebootRequired);

bool InstallDevice(
    const char *pInfFilePath,
    const char *pDevId,
    const char *pDevInstID,
    PCNC_DEV_CALLBACK pDevCallBack,
    void *pDevCallBackParam,
    bool updateDriver,
    BOOL *pRebootRequired);

bool WaitNoPendingInstallEvents(
    int timeLimit,
    bool repeate = FALSE);
///////////////////////////////////////////////////////////////

#endif /* _C0C_DEVUTILS_H_ */
@


1.13
log
@Fixed types
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.12 2011/07/13 17:39:56 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2011 Vyacheslav Frolov
d22 3
d173 2
a174 1
    int timeLimit);
@


1.12
log
@Fixed result treatment of UpdateDriverForPlugAndPlayDevices()
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.11 2010/07/29 12:18:43 vfrolov Exp $
d22 3
d96 2
a97 1
typedef BOOL (* PDEVCALLBACK)(
d103 2
d106 2
a107 1
typedef BOOL (* C0C_ENUM_FILTER)(const char *pHardwareId);
d110 1
a110 1
    C0C_ENUM_FILTER pFilter,
d113 2
a114 2
    PDEVCALLBACK pDevCallBack,
    void *pCallBackParam);
d123 2
a124 2
BOOL DisableDevices(
    C0C_ENUM_FILTER pFilter,
d129 2
a130 2
BOOL EnableDevices(
    C0C_ENUM_FILTER pFilter,
d134 2
a135 2
BOOL RestartDevices(
    C0C_ENUM_FILTER pFilter,
d139 1
a139 1
BOOL RemoveDevice(
d145 2
a146 2
BOOL RemoveDevices(
    C0C_ENUM_FILTER pFilter,
d150 1
a150 1
BOOL ReenumerateDeviceNode(
d157 1
a157 1
    BOOL mandatory,
d160 1
a160 1
BOOL InstallDevice(
d164 3
a166 3
    PDEVCALLBACK pDevCallBack,
    void *pCallBackParam,
    BOOL updateDriver,
d169 1
a169 1
BOOL WaitNoPendingInstallEvents(
@


1.11
log
@Fixed waiting stuff
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.10 2010/07/15 18:11:10 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2010 Vyacheslav Frolov
d22 3
d150 1
@


1.10
log
@Fixed --wait option for Ports class
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.9 2010/06/07 07:03:31 vfrolov Exp $
d22 3
d158 1
a158 1
int WaitNoPendingInstallEvents(
@


1.9
log
@Added wrapper UpdateDriver() for UpdateDriverForPlugAndPlayDevices()
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.8 2010/05/27 11:16:46 vfrolov Exp $
d22 3
d154 3
@


1.8
log
@Added ability to put the port to the Ports class
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.7 2009/02/11 07:35:22 vfrolov Exp $
d22 3
d137 6
d149 2
a150 1
    BOOL update);
@


1.7
log
@Added --no-update option
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.6 2007/10/01 15:01:35 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2009 Vyacheslav Frolov
d22 3
a49 1

a78 1
class InfFile;
a86 1

d88 2
a89 1

d91 1
a91 1
    InfFile &infFile,
d105 1
a105 1
    InfFile &infFile,
d111 1
a111 1
    InfFile &infFile,
d116 1
a116 1
    InfFile &infFile,
d127 1
a127 1
    InfFile &infFile,
d131 3
d135 1
a135 1
    InfFile &infFile,
a140 1

@


1.6
log
@Added pDevInstID parameter to InstallDevice()
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.5 2007/09/25 12:42:49 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2007 Vyacheslav Frolov
d22 3
d135 2
a136 1
    void *pCallBackParam);
@


1.5
log
@Fixed update command (bug if multiple pairs active)
Fixed uninstall command (restore active ports on cancell)
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.4 2007/09/17 14:35:06 vfrolov Exp $
d22 4
d130 1
@


1.4
log
@Fixed typo
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.3 2006/11/10 14:07:40 vfrolov Exp $
d22 3
d41 25
a65 6
struct DevProperties {
  DevProperties() : pDevId(NULL), pPhObjName(NULL), pLocation(NULL) {}

  const char *pDevId;
  const char *pPhObjName;
  const char *pLocation;
d71 1
d93 2
a94 1
    BOOL *pRebootRequired);
d99 6
@


1.3
log
@Implemented remove command
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.2 2006/11/02 16:20:44 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006 Vyacheslav Frolov
d22 3
d39 1
a39 1
  DevProperties() : pDevId(), pPhObjName(), pLocation() {}
@


1.2
log
@Added usage the fixed port numbers
@
text
@d2 1
a2 1
 * $Id: devutils.h,v 1.1 2006/07/28 12:16:43 vfrolov Exp $
d22 3
a27 1
 *
d33 12
d50 1
d54 2
d58 1
a58 1
    const char *pDevId,
d63 6
d71 1
a71 1
    const char *pDevId,
d76 7
a82 2
    const char *pDevId,
    const char *pPhDevName,
d87 1
a87 1
    const char *pDevId,
d96 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: $
d21 4
a24 1
 * $Log: $
d33 7
a39 1
int CountDevices(
d41 4
a44 1
    const char *pDevId);
d64 3
a66 1
    const char *pDevId);
@

