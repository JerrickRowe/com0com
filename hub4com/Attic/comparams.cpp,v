head	1.5;
access;
symbols
	v1_1_0_0:1.4
	RELEASED:1.4
	v1_0_0_0:1.3;
locks; strict;
comment	@// @;


1.5
date	2008.03.26.08.50.35;	author vfrolov;	state dead;
branches;
next	1.4;

1.4
date	2007.05.14.12.06.37;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.06.11.53.33;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.01.12.14.59;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.23.09.13.10;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Redesigned for using plugins
@
text
@/*
 * $Id: comparams.cpp,v 1.4 2007/05/14 12:06:37 vfrolov Exp $
 *
 * Copyright (c) 2006-2007 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: comparams.cpp,v $
 * Revision 1.4  2007/05/14 12:06:37  vfrolov
 * Added read interval timeout option
 *
 * Revision 1.3  2007/02/06 11:53:33  vfrolov
 * Added options --odsr, --ox, --ix and --idsr
 * Added communications error reporting
 *
 * Revision 1.2  2007/02/01 12:14:59  vfrolov
 * Redesigned COM port params
 *
 * Revision 1.1  2007/01/23 09:13:10  vfrolov
 * Initial revision
 *
 *
 */

#include "precomp.h"
#include "comparams.h"

///////////////////////////////////////////////////////////////
ComParams::ComParams()
  : baudRate(CBR_19200),
    byteSize(8),
    parity(NOPARITY),
    stopBits(ONESTOPBIT),
    outCts(1),
    outDsr(0),
    outX(0),
    inX(0),
    inDsr(0),
    intervalTimeout(0)
{
}

BOOL ComParams::SetBaudRate(const char *pBaudRate)
{
  if (*pBaudRate == 'c') {
    baudRate = -1;
    return TRUE;
  }

  if (isdigit(*pBaudRate)) {
    baudRate = atol(pBaudRate);
    return TRUE;
  }

  return FALSE;
}

BOOL ComParams::SetByteSize(const char *pByteSize)
{
  if (*pByteSize == 'c') {
    byteSize = -1;
    return TRUE;
  }

  if (isdigit(*pByteSize)) {
    byteSize = atoi(pByteSize);
    return TRUE;
  }

  return FALSE;
}

BOOL ComParams::SetParity(const char *pParity)
{
  switch (*pParity) {
    case 'n': parity = NOPARITY; break;
    case 'o': parity = ODDPARITY; break;
    case 'e': parity = EVENPARITY; break;
    case 'm': parity = MARKPARITY; break;
    case 's': parity = SPACEPARITY; break;
    case 'c': parity = -1; break;
    default : return FALSE;
  }
  return TRUE;
}

BOOL ComParams::SetStopBits(const char *pStopBits)
{
  switch (*pStopBits) {
    case '1':
      if ((pStopBits[1] == '.' || pStopBits[1] == ',') && pStopBits[2] == '5')
        stopBits = ONE5STOPBITS;
      else
        stopBits = ONESTOPBIT;
      break;
    case '2': stopBits = TWOSTOPBITS; break;
    case 'c': stopBits = -1; break;
    default : return FALSE;
  }
  return TRUE;
}

BOOL ComParams::SetIntervalTimeout(const char *pIntervalTimeout)
{
  if (isdigit(*pIntervalTimeout)) {
    intervalTimeout = atol(pIntervalTimeout);
    return TRUE;
  }

  return FALSE;
}

BOOL ComParams::SetFlag(const char *pFlagStr, int *pFlag)
{
  if (_stricmp(pFlagStr, "on") == 0) {
    *pFlag = 1;
  }
  else
  if (_stricmp(pFlagStr, "off") == 0) {
    *pFlag = 0;
  }
  else
  if (*pFlagStr == 'c') {
    *pFlag = -1;
  }
  else
    return FALSE;
 
  return TRUE;
}
///////////////////////////////////////////////////////////////
string ComParams::BaudRateStr(long baudRate)
{
  if (baudRate >= 0) {
    stringstream buf;
    buf << baudRate;
    return buf.str();
  }

  return baudRate == -1 ? "current" : "?";
}

string ComParams::ByteSizeStr(int byteSize)
{
  if (byteSize >= 0) {
    stringstream buf;
    buf << byteSize;
    return buf.str();
  }

  return byteSize == -1 ? "current" : "?";
}

string ComParams::ParityStr(int parity)
{
  switch (parity) {
    case NOPARITY: return "no";
    case ODDPARITY: return "odd";
    case EVENPARITY: return "even";
    case MARKPARITY: return "mark";
    case SPACEPARITY: return "space";
    case -1: return "current";
  }
  return "?";
}

string ComParams::StopBitsStr(int stopBits)
{
  switch (stopBits) {
    case ONESTOPBIT: return "1";
    case ONE5STOPBITS: return "1.5";
    case TWOSTOPBITS: return "2";
    case -1: return "current";
  }
  return "?";
}

string ComParams::IntervalTimeoutStr(long intervalTimeout)
{
  if (intervalTimeout > 0) {
    stringstream buf;
    buf << intervalTimeout;
    return buf.str();
  }

  return "0";
}

string ComParams::FlagStr(int flag)
{
  switch (flag) {
    case 1: return "on";
    case 0: return "off";
    case -1: return "current";
  }
  return "?";
}
///////////////////////////////////////////////////////////////
const char *ComParams::BaudRateLst()
{
  return "a positive number or c[urrent]";
}

const char *ComParams::ByteSizeLst()
{
  return "a positive number or c[urrent]";
}

const char *ComParams::ParityLst()
{
  return "n[o], o[dd], e[ven], m[ark], s[pace] or c[urrent]";
}

const char *ComParams::StopBitsLst()
{
  return "1, 1.5, 2 or c[urrent]";
}

const char *ComParams::IntervalTimeoutLst()
{
  return "a positive number or 0 milliseconds";
}

const char *ComParams::FlagLst()
{
  return "on, off or c[urrent]";
}
///////////////////////////////////////////////////////////////
@


1.4
log
@Added read interval timeout option
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.3 2007/02/06 11:53:33 vfrolov Exp $
d22 3
@


1.3
log
@Added options --odsr, --ox, --ix and --idsr
Added communications error reporting
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.2 2007/02/01 12:14:59 vfrolov Exp $
d22 4
d48 2
a49 1
    inDsr(0)
d113 10
d188 11
d229 5
@


1.2
log
@Redesigned COM port params
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.1 2007/01/23 09:13:10 vfrolov Exp $
d22 3
d41 4
a44 1
    outDsr(0)
d108 1
a108 20
BOOL ComParams::SetOutCts(const char *pOutCts)
{
  if (_stricmp(pOutCts, "on") == 0) {
    outCts = 1;
  }
  else
  if (_stricmp(pOutCts, "off") == 0) {
    outCts = 0;
  }
  else
  if (*pOutCts == 'c') {
    outCts = -1;
  }
  else
    return FALSE;
 
  return TRUE;
}

BOOL ComParams::SetOutDsr(const char *pOutDsr)
d110 2
a111 2
  if (_stricmp(pOutDsr, "on") == 0) {
    outDsr = 1;
d114 2
a115 2
  if (_stricmp(pOutDsr, "off") == 0) {
    outDsr = 0;
d118 2
a119 2
  if (*pOutDsr == 'c') {
    outDsr = -1;
d173 1
a173 1
string ComParams::OutCtsStr(int outCts)
d175 1
a175 11
  switch (outCts) {
    case 1: return "on";
    case 0: return "off";
    case -1: return "current";
  }
  return "?";
}

string ComParams::OutDsrStr(int outDsr)
{
  switch (outDsr) {
d203 1
a203 6
const char *ComParams::OutCtsLst()
{
  return "on, off or c[urrent]";
}

const char *ComParams::OutDsrLst()
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id:  $
d21 4
a24 1
 * $Log: $
d36 22
a57 1
    stopBits(ONESTOPBIT)
d59 11
d80 1
a80 1
    case 'd': parity = -1; break;
d96 1
a96 1
    case 'd': stopBits = -1; break;
d102 61
a162 1
const char *ComParams::ParityStr(int parity)
d170 1
a170 1
    case -1: return "default";
d175 1
a175 1
const char *ComParams::StopBitsStr(int stopBits)
d181 1
a181 1
    case -1: return "default";
d186 20
d208 1
a208 1
  return "a positive number or d[efault]";
d213 1
a213 1
  return "a positive number or d[efault]";
d218 1
a218 1
  return "n[o], o[dd], e[ven], m[ark], s[pace] or d[efault]";
d223 11
a233 1
  return "1, 1.5, 2 or d[efault]";
@

