head	1.12;
access;
symbols
	v2_1_0_0:1.12
	v2_0_1_0:1.11
	RELEASED:1.12
	v2_0_0_0:1.11;
locks; strict;
comment	@// @;


1.12
date	2011.07.25.07.05.00;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.02.15.21.42;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.22.09.40.45;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.18.16.50.51;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.25.16.40.40;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.24.12.37.00;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.13.07.47.48;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.22.08.27.26;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.16.09.24.23;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.30.08.28.32;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.29.13.02.37;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.22.17.02.59;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fixed set-ID field assertion
@
text
@/*
 * $Id: filter.cpp,v 1.11 2009/02/02 15:21:42 vfrolov Exp $
 *
 * Copyright (c) 2008-2011 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: filter.cpp,v $
 * Revision 1.11  2009/02/02 15:21:42  vfrolov
 * Optimized filter's API
 *
 * Revision 1.10  2008/12/22 09:40:45  vfrolov
 * Optimized message switching
 *
 * Revision 1.9  2008/12/18 16:50:51  vfrolov
 * Extended the number of possible IN options
 *
 * Revision 1.8  2008/11/25 16:40:40  vfrolov
 * Added assert for port handle
 *
 * Revision 1.7  2008/11/24 12:37:00  vfrolov
 * Changed plugin API
 *
 * Revision 1.6  2008/11/13 07:47:48  vfrolov
 * Changed for staticaly linking
 *
 * Revision 1.5  2008/10/22 08:27:26  vfrolov
 * Added ability to set bytesize, parity and stopbits separately
 *
 * Revision 1.4  2008/10/16 09:24:23  vfrolov
 * Changed return type of ROUTINE_MSG_REPLACE_*() to BOOL
 *
 * Revision 1.3  2008/09/30 08:28:32  vfrolov
 * Added ability to control OUT1 and OUT2 pins
 * Added ability to get remote baud rate and line control settings
 * Added ability to set baud rate and line control
 * Added fallback to non escape mode
 *
 * Revision 1.2  2008/08/29 13:02:37  vfrolov
 * Added ESC_OPTS_MAP_EO2GO() and ESC_OPTS_MAP_GO2EO()
 *
 * Revision 1.1  2008/08/22 17:02:59  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"
#include "../plugins_api.h"
#include "../cncext.h"
///////////////////////////////////////////////////////////////
namespace FilterEscParse {
///////////////////////////////////////////////////////////////
#ifndef _DEBUG
  #define DEBUG_PARAM(par)
#else   /* _DEBUG */
  #define DEBUG_PARAM(par) par
#endif  /* _DEBUG */
///////////////////////////////////////////////////////////////
static ROUTINE_MSG_INSERT_VAL *pMsgInsertVal;
static ROUTINE_MSG_INSERT_NONE *pMsgInsertNone;
static ROUTINE_MSG_REPLACE_NONE *pMsgReplaceNone;
static ROUTINE_MSG_INSERT_BUF *pMsgInsertBuf;
static ROUTINE_MSG_REPLACE_BUF *pMsgReplaceBuf;
static ROUTINE_PORT_NAME_A *pPortName;
static ROUTINE_FILTER_NAME_A *pFilterName;
static ROUTINE_FILTERPORT *pFilterPort;
///////////////////////////////////////////////////////////////
const char *GetParam(const char *pArg, const char *pPattern)
{
  size_t lenPattern = strlen(pPattern);

  if (_strnicmp(pArg, pPattern, lenPattern) != 0)
    return NULL;

  return pArg + lenPattern;
}
///////////////////////////////////////////////////////////////
class Valid {
  public:
    Valid() : isValid(TRUE) {}
    void Invalidate() { isValid = FALSE; }
    BOOL IsValid() const { return isValid; }
  private:
    BOOL isValid;
};
///////////////////////////////////////////////////////////////
class State {
  public:
    State(HMASTERPORT hMasterPort)
      : pName(pPortName(hMasterPort)),
        escMode(FALSE),
        intercepted_options(0),
        maskMst(0),
        maskLsr(0),
        _options(0)
    {
      Reset();
    }

    HUB_MSG *Convert(BYTE escapeChar, HUB_MSG *pMsg);

    DWORD Options() const {
      return _options;
    }

    void OptionsDel(DWORD opts) {
      _options &= ~opts;
      maskMst = GO1_O2V_MODEM_STATUS(_options);
      maskLsr = GO1_O2V_LINE_STATUS(_options);
    }

    void OptionsAdd(DWORD opts) {
      _options |= opts;
      maskMst = GO1_O2V_MODEM_STATUS(_options);
      maskLsr = GO1_O2V_LINE_STATUS(_options);
    }

    const char *const pName;
    BOOL escMode;
    DWORD intercepted_options;

  private:
    void Reset() { state = subState = 0; }
    HUB_MSG *Flush(HUB_MSG *pMsg);

    BYTE maskMst;
    BYTE maskLsr;
    int state;
    BYTE code;
    int subState;
    BYTE data[sizeof(ULONG)];
    basic_string<BYTE> line_data;

    DWORD _options;
};

HUB_MSG *State::Flush(HUB_MSG *pMsg)
{
  if (!line_data.empty()) {
    pMsg = pMsgInsertBuf(pMsg,
                         HUB_MSG_TYPE_LINE_DATA,
                         line_data.data(),
                         (DWORD)line_data.size());

    line_data.clear();
  }

  return pMsg;
}

HUB_MSG *State::Convert(BYTE escapeChar, HUB_MSG *pMsg)
{
  _ASSERTE(pMsg->type == HUB_MSG_TYPE_LINE_DATA);

  if (!escMode)
    return pMsg;

  DWORD len = pMsg->u.buf.size;
  basic_string<BYTE> org(pMsg->u.buf.pBuf, len);
  const BYTE *pBuf = org.data();

  // discard original data from the stream
  if (!pMsgReplaceBuf(pMsg, HUB_MSG_TYPE_LINE_DATA, NULL, 0))
    return NULL;

  for (; len ; len--) {
    BYTE ch = *pBuf++;

    switch (state) {
      case 0:
        break;
      case 1:
        code = ch;
        state++;
      case 2:
        switch (code) {
          case SERIAL_LSRMST_ESCAPE:
            line_data.append(&escapeChar, 1);
            Reset();
            break;
          case SERIAL_LSRMST_LSR_DATA:
          case SERIAL_LSRMST_LSR_NODATA:
            _ASSERTE(subState >= 0 && (subState <= 1 || (code == SERIAL_LSRMST_LSR_DATA && subState <= 2)));

            switch (subState) {
              case 0:
                subState++;
                break;
              case 1:
                data[0] = ch;
                if (code == SERIAL_LSRMST_LSR_DATA) {
                  subState++;
                  break;
                }
              case 2:
                if (Options() & GO1_BREAK_STATUS) {
                  pMsg = Flush(pMsg);
                  if (!pMsg)
                    return NULL;
                  pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_BREAK_STATUS, (data[0] & LINE_STATUS_BI) != 0);
                  if (!pMsg)
                    return NULL;
                }
                if (data[0] & maskLsr) {
                  pMsg = Flush(pMsg);
                  if (!pMsg)
                    return NULL;
                  pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_LINE_STATUS, data[0] | VAL2MASK(maskLsr));
                  if (!pMsg)
                    return NULL;
                }
                if (subState == 2 && ((data[0] & LINE_STATUS_BI) == 0 || ch != 0)) {
                  // insert error character if it is not part of break
                  line_data.append(&ch, 1);
                }
                Reset();
                break;
              default:
                cerr << "ERROR: SERIAL_LSRMST_LSR_*DATA subState=" << subState << endl;
                Reset();
            }
            break;
          case SERIAL_LSRMST_MST:
            _ASSERTE(subState >= 0 && subState <= 1);

            if (subState == 0) {
              subState++;
            } else if (subState == 1) {
              if (maskMst) {
                pMsg = Flush(pMsg);
                if (!pMsg)
                  return NULL;
                pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_MODEM_STATUS, ch | VAL2MASK(maskMst));
                if (!pMsg)
                  return NULL;
              }
              Reset();
            } else {
              cerr << "ERROR: SERIAL_LSRMST_MST subState=" << subState << endl;
              Reset();
            }
            break;
          case C0CE_INSERT_RBR:
            _ASSERTE(subState >= 0 && subState < (sizeof(ULONG) + 1));

            if (subState == 0) {
              subState++;
            } else if (subState >= 1 && subState < (sizeof(ULONG) + 1)) {
              data[subState - 1] = ch;
              if (subState < sizeof(ULONG)) {
                subState++;
              } else {
                if (Options() & GO1_RBR_STATUS) {
                  pMsg = Flush(pMsg);
                  if (!pMsg)
                    return NULL;
                  pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_RBR_STATUS, *(ULONG *)data);
                  if (!pMsg)
                    return NULL;
                }
                Reset();
              }
            } else {
              cerr << "ERROR: C0CE_INSERT_RBR subState=" << subState << endl;
              Reset();
            }
            break;
          case C0CE_INSERT_RLC:
            _ASSERTE(subState >= 0 && subState <= 3);

            if (subState == 0) {
              subState++;
            }  else if (subState >= 1 && subState <= 3) {
              data[subState - 1] = ch;
              if (subState < 3) {
                subState++;
              } else {
                if (Options() & GO1_RLC_STATUS) {
                  pMsg = Flush(pMsg);
                  if (!pMsg)
                    return NULL;
                  pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_RLC_STATUS,
                      (VAL2LC_BYTESIZE(data[0])|LC_MASK_BYTESIZE
                      |VAL2LC_PARITY(data[1])|LC_MASK_PARITY
                      |VAL2LC_STOPBITS(data[2])|LC_MASK_STOPBITS));
                  if (!pMsg)
                    return NULL;
                }
                Reset();
              }
            } else {
              cerr << "ERROR: C0CE_INSERT_RLC subState=" << subState << endl;
              _ASSERTE(FALSE);
              Reset();
            }
            break;
          default:
            cerr << "ERROR: SERIAL_LSRMST_" << (WORD)code << " subState=" << subState << endl;
            Reset();
        }
        continue;

      default:
        cerr << "ERROR: state=" << state << endl;
        Reset();
    }

    if (ch == escapeChar) {
      state = 1;
      continue;
    }

    line_data.append(&ch, 1);
  }

  return Flush(pMsg);
}
///////////////////////////////////////////////////////////////
class Filter : public Valid {
  public:
    Filter(const char *pName, int argc, const char *const argv[]);

    const char *FilterName() const { return pName; }

    BOOL requestEscMode;
    BYTE escapeChar;
    DWORD acceptableOptions;

  private:
    const char *pName;
};

Filter::Filter(const char *_pName, int argc, const char *const argv[])
  : pName(_pName),
    requestEscMode(TRUE),
    escapeChar(0xFF),
    acceptableOptions(
      GO1_RBR_STATUS |
      GO1_RLC_STATUS |
      GO1_BREAK_STATUS |
      GO1_V2O_MODEM_STATUS(-1) |
      GO1_V2O_LINE_STATUS(-1))
{
  for (const char *const *pArgs = &argv[1] ; argc > 1 ; pArgs++, argc--) {
    const char *pArg = GetParam(*pArgs, "--");

    if (!pArg) {
      cerr << "Unknown option " << *pArgs << endl;
      Invalidate();
      continue;
    }

    const char *pParam;

    if ((pParam = GetParam(pArg, "request-esc-mode=")) != NULL) {
      if (_stricmp(pParam, "yes") == 0) {
        requestEscMode = TRUE;
      }
      else
      if (_stricmp(pParam, "no") == 0) {
        requestEscMode = FALSE;
      }
      else {
        cerr << "Unknown value --" << pArg << endl;
        Invalidate();
      }
    } else {
      cerr << "Unknown option --" << pArg << endl;
      Invalidate();
    }
  }
}
///////////////////////////////////////////////////////////////
static PLUGIN_TYPE CALLBACK GetPluginType()
{
  return PLUGIN_TYPE_FILTER;
}
///////////////////////////////////////////////////////////////
static const PLUGIN_ABOUT_A about = {
  sizeof(PLUGIN_ABOUT_A),
  "escparse",
  "Copyright (c) 2008 Vyacheslav Frolov",
  "GNU General Public License",
  "Escaped data stream parsing filter",
};

static const PLUGIN_ABOUT_A * CALLBACK GetPluginAbout()
{
  return &about;
}
///////////////////////////////////////////////////////////////
static void CALLBACK Help(const char *pProgPath)
{
  cerr
  << "Usage:" << endl
  << "  " << pProgPath << " ... --create-filter=" << GetPluginAbout()->pName << "[,<FID>][:<options>] ... --add-filters=<ports>:[...,]<FID>[,...] ..." << endl
  << endl
  << "Options:" << endl
  << "  --request-esc-mode={yes|no}  - send request to driver to produce escaped data" << endl
  << "                                 (yes by default)." << endl
  << endl
  << "Examples:" << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      --create-filter=pinmap" << endl
  << "      --create-filter=escparse" << endl
  << "      --add-filters=0,1:pinmap,escparse" << endl
  << "      COM1" << endl
  << "      COM2" << endl
  << "      _END_" << endl
  << "    - transfer data and signals between COM1 and COM2." << endl
  ;
}
///////////////////////////////////////////////////////////////
static HFILTER CALLBACK Create(
    HMASTERFILTER hMasterFilter,
    HCONFIG /*hConfig*/,
    int argc,
    const char *const argv[])
{
  _ASSERTE(hMasterFilter != NULL);

  Filter *pFilter = new Filter(pFilterName(hMasterFilter), argc, argv);

  if (!pFilter) {
    cerr << "No enough memory." << endl;
    exit(2);
  }

  if (!pFilter->IsValid()) {
    delete pFilter;
    return NULL;
  }

  return (HFILTER)pFilter;
}
///////////////////////////////////////////////////////////////
static void CALLBACK Delete(
    HFILTER hFilter)
{
  _ASSERTE(hFilter != NULL);

  delete (Filter *)hFilter;
}
///////////////////////////////////////////////////////////////
static HFILTERINSTANCE CALLBACK CreateInstance(
    HMASTERFILTERINSTANCE hMasterFilterInstance)
{
  _ASSERTE(hMasterFilterInstance != NULL);

  HMASTERPORT hMasterPort = pFilterPort(hMasterFilterInstance);

  _ASSERTE(hMasterPort != NULL);

  return (HFILTERINSTANCE)new State(hMasterPort);
}
///////////////////////////////////////////////////////////////
static void CALLBACK DeleteInstance(
    HFILTERINSTANCE hFilterInstance)
{
  _ASSERTE(hFilterInstance != NULL);

  delete (State *)hFilterInstance;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK InMethod(
    HFILTER hFilter,
    HFILTERINSTANCE hFilterInstance,
    HUB_MSG *pInMsg,
    HUB_MSG ** DEBUG_PARAM(ppEchoMsg))
{
  _ASSERTE(hFilter != NULL);
  _ASSERTE(hFilterInstance != NULL);
  _ASSERTE(pInMsg != NULL);
  _ASSERTE(ppEchoMsg != NULL);
  _ASSERTE(*ppEchoMsg == NULL);

  switch (HUB_MSG_T2N(pInMsg->type)) {
    case HUB_MSG_T2N(HUB_MSG_TYPE_COUNT_REPEATS):
      if (HUB_MSG_T2N(pInMsg->u.pv.val) == HUB_MSG_T2N(HUB_MSG_TYPE_GET_IN_OPTS)) {
        // we need it twice to
        //   - get interceptable options from subsequent filters
        //   - accept the received options and request the escape mode

        (*pInMsg->u.pv.pVal)++;
      }
      break;
    case HUB_MSG_T2N(HUB_MSG_TYPE_GET_IN_OPTS): {
      int iGo = GO_O2I(pInMsg->u.pv.val);

      if (iGo == 0) {
        // if the subsequent filters require interceptable options then
        // accept the received options and request the escape mode

        ((State *)hFilterInstance)->OptionsAdd((((State *)hFilterInstance)->intercepted_options & ((Filter *)hFilter)->acceptableOptions));

        if (((Filter *)hFilter)->requestEscMode) {
          if (((State *)hFilterInstance)->Options() && (pInMsg->u.pv.val & GO0_ESCAPE_MODE)) {
            ((State *)hFilterInstance)->escMode = TRUE;
            *pInMsg->u.pv.pVal |= GO0_ESCAPE_MODE; // request the escape mode
          }
        } else {
          ((State *)hFilterInstance)->escMode = TRUE;
        }

        // the subsequent filters can't request the escape mode

        pInMsg->u.pv.val &= ~GO0_ESCAPE_MODE;
      }
      else
      if (iGo == 1) {
        // get interceptable options from subsequent filters separately

        DWORD interceptable_options = (pInMsg->u.pv.val & ((Filter *)hFilter)->acceptableOptions);

        _ASSERTE((interceptable_options & GO_I2O(-1)) == 0);
        interceptable_options &= ~GO_I2O(-1);

        pInMsg->u.pv.val &= ~interceptable_options;

        pInMsg = pMsgInsertNone(pInMsg, HUB_MSG_TYPE_EMPTY);

        if (!pInMsg)
          return FALSE;

        pInMsg->type = HUB_MSG_TYPE_GET_IN_OPTS;
        pInMsg->u.pv.pVal = &((State *)hFilterInstance)->intercepted_options;
        pInMsg->u.pv.val = interceptable_options | GO_I2O(iGo);
      }

      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_GET_ESC_OPTS): {
      *pInMsg->u.pv.pVal = ESC_OPTS_MAP_GO1_2_EO(((State *)hFilterInstance)->Options()) |
                           ESC_OPTS_V2O_ESCCHAR(((Filter *)hFilter)->escapeChar);

      // hide this message from subsequent filters
      if (!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
        return FALSE;

      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_FAIL_ESC_OPTS): {
      DWORD fail_options = (pInMsg->u.pv.val & ESC_OPTS_MAP_GO1_2_EO(((State *)hFilterInstance)->Options()));

      if (fail_options) {
        cerr << ((State *)hFilterInstance)->pName
             << " WARNING: Requested by filter " << ((Filter *)hFilter)->FilterName()
             << " escape mode option(s) 0x" << hex << fail_options << dec
             << " not accepted (will try non escape mode option(s))" << endl;

        ((State *)hFilterInstance)->OptionsDel(ESC_OPTS_MAP_EO_2_GO1(fail_options));
        *pInMsg->u.pv.pVal |= ESC_OPTS_MAP_EO_2_GO1(fail_options);
      }

      // hide this message from subsequent filters
      if (!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
        return FALSE;

      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_FAIL_IN_OPTS): {
      if (GO_O2I(pInMsg->u.pv.val) != 0)
        break;

      if ((pInMsg->u.val & GO0_ESCAPE_MODE) && ((Filter *)hFilter)->requestEscMode) {
        cerr << ((State *)hFilterInstance)->pName
             << " WARNING: Requested by filter " << ((Filter *)hFilter)->FilterName()
             << " option ESCAPE_MODE not accepted" << endl;

        ((State *)hFilterInstance)->escMode = FALSE;
        ((State *)hFilterInstance)->OptionsDel((DWORD)-1);
      }

      pInMsg->u.val &= ~GO0_ESCAPE_MODE; // hide from subsequent filters

      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_LINE_DATA): {
      _ASSERTE(pInMsg->u.buf.pBuf != NULL || pInMsg->u.buf.size == 0);

      if (pInMsg->u.buf.size == 0)
        return TRUE;

      pInMsg = ((State *)hFilterInstance)->Convert(((Filter *)hFilter)->escapeChar, pInMsg);

      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_MODEM_STATUS): {
      // discard any status settings controlled by this filter
      pInMsg->u.val &= ~VAL2MASK(GO1_O2V_MODEM_STATUS(((State *)hFilterInstance)->Options()));
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_LINE_STATUS): {
      // discard any status settings controlled by this filter
      pInMsg->u.val &= ~VAL2MASK(GO1_O2V_LINE_STATUS(((State *)hFilterInstance)->Options()));
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_RBR_STATUS): {
      if (((State *)hFilterInstance)->Options() & GO1_RBR_STATUS) {
        // discard any status settings controlled by this filter
        if (!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
          return FALSE;
      }
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_RLC_STATUS): {
      if (((State *)hFilterInstance)->Options() & GO1_RLC_STATUS) {
        // discard any status settings controlled by this filter
        if (!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
          return FALSE;
      }
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_BREAK_STATUS): {
      if (((State *)hFilterInstance)->Options() & GO1_BREAK_STATUS) {
        // discard any status settings controlled by this filter
        if (!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
          return FALSE;
      }
      break;
    }
  }

  return pInMsg != NULL;
}
///////////////////////////////////////////////////////////////
static const FILTER_ROUTINES_A routines = {
  sizeof(FILTER_ROUTINES_A),
  GetPluginType,
  GetPluginAbout,
  Help,
  NULL,           // ConfigStart
  NULL,           // Config
  NULL,           // ConfigStop
  Create,
  Delete,
  CreateInstance,
  DeleteInstance,
  InMethod,
  NULL,           // OutMethod
};

static const PLUGIN_ROUTINES_A *const plugins[] = {
  (const PLUGIN_ROUTINES_A *)&routines,
  NULL
};
///////////////////////////////////////////////////////////////
PLUGIN_INIT_A InitA;
const PLUGIN_ROUTINES_A *const * CALLBACK InitA(
    const HUB_ROUTINES_A * pHubRoutines)
{
  if (!ROUTINE_IS_VALID(pHubRoutines, pMsgInsertVal) ||
      !ROUTINE_IS_VALID(pHubRoutines, pMsgInsertNone) ||
      !ROUTINE_IS_VALID(pHubRoutines, pMsgReplaceNone) ||
      !ROUTINE_IS_VALID(pHubRoutines, pMsgInsertBuf) ||
      !ROUTINE_IS_VALID(pHubRoutines, pMsgReplaceBuf) ||
      !ROUTINE_IS_VALID(pHubRoutines, pPortName) ||
      !ROUTINE_IS_VALID(pHubRoutines, pFilterName) ||
      !ROUTINE_IS_VALID(pHubRoutines, pFilterPort))
  {
    return NULL;
  }

  pMsgInsertVal = pHubRoutines->pMsgInsertVal;
  pMsgInsertNone = pHubRoutines->pMsgInsertNone;
  pMsgReplaceNone = pHubRoutines->pMsgReplaceNone;
  pMsgInsertBuf = pHubRoutines->pMsgInsertBuf;
  pMsgReplaceBuf = pHubRoutines->pMsgReplaceBuf;
  pPortName = pHubRoutines->pPortName;
  pFilterName = pHubRoutines->pFilterName;
  pFilterPort = pHubRoutines->pFilterPort;

  return plugins;
}
///////////////////////////////////////////////////////////////
} // end namespace
///////////////////////////////////////////////////////////////
@


1.11
log
@Optimized filter's API
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.10 2008/12/22 09:40:45 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008-2009 Vyacheslav Frolov
d22 3
d528 3
a539 1
        _ASSERTE((interceptable_options & GO_I2O(-1)) == 0);
@


1.10
log
@Optimized message switching
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.9 2008/12/18 16:50:51 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008 Vyacheslav Frolov
d22 3
d69 8
a76 7
static ROUTINE_MSG_INSERT_VAL *pMsgInsertVal = NULL;
static ROUTINE_MSG_INSERT_NONE *pMsgInsertNone = NULL;
static ROUTINE_MSG_REPLACE_NONE *pMsgReplaceNone = NULL;
static ROUTINE_MSG_INSERT_BUF *pMsgInsertBuf = NULL;
static ROUTINE_MSG_REPLACE_BUF *pMsgReplaceBuf = NULL;
static ROUTINE_PORT_NAME_A *pPortName = NULL;
static ROUTINE_FILTER_NAME_A *pFilterName = NULL;
d97 1
a97 1
class EscParse {
d99 3
a101 2
    EscParse(BYTE _escapeChar)
      : escMode(FALSE),
a102 1
        escapeChar(_escapeChar),
d110 1
a110 1
    HUB_MSG *Convert(HUB_MSG *pMsg);
d128 1
a135 1
    BYTE escapeChar;
d147 1
a147 1
HUB_MSG *EscParse::Flush(HUB_MSG *pMsg)
d161 1
a161 1
HUB_MSG *EscParse::Convert(HUB_MSG *pMsg)
d331 1
a331 2
    Filter(int argc, const char *const argv[]);
    EscParse *GetEscParse(HMASTERPORT hPort);
a332 1
    void SetFilterName(const char *_pName) { pName = _pName; }
a340 5

    typedef map<HMASTERPORT, EscParse*> PortsMap;
    typedef pair<HMASTERPORT, EscParse*> PortPair;

    PortsMap portsMap;
d343 3
a345 2
Filter::Filter(int argc, const char *const argv[])
  : requestEscMode(TRUE),
d352 1
a352 2
      GO1_V2O_LINE_STATUS(-1)),
    pName(NULL)
a382 19

EscParse *Filter::GetEscParse(HMASTERPORT hPort)
{
  PortsMap::iterator iPair = portsMap.find(hPort);

  if (iPair == portsMap.end()) {
      portsMap.insert(PortPair(hPort, NULL));

      iPair = portsMap.find(hPort);

      if (iPair == portsMap.end())
        return NULL;
  }

  if (!iPair->second)
    iPair->second = new EscParse(escapeChar);

  return iPair->second;
}
d425 1
d430 1
a430 1
  Filter *pFilter = new Filter(argc, argv);
d432 6
a437 2
  if (!pFilter)
    return NULL;
d447 2
a448 3
static BOOL CALLBACK Init(
    HFILTER hFilter,
    HMASTERFILTER hMasterFilter)
a450 1
  _ASSERTE(hMasterFilter != NULL);
d452 19
a470 1
  ((Filter *)hFilter)->SetFilterName(pFilterName(hMasterFilter));
d472 1
a472 1
  return TRUE;
d477 1
a477 1
    HMASTERPORT hFromPort,
d482 1
a482 1
  _ASSERTE(hFromPort != NULL);
a500 5
        EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

        if (!pEscParse)
          return FALSE;

d504 1
a504 1
        pEscParse->OptionsAdd((pEscParse->intercepted_options & ((Filter *)hFilter)->acceptableOptions));
d507 2
a508 2
          if (pEscParse->Options() && (pInMsg->u.pv.val & GO0_ESCAPE_MODE)) {
            pEscParse->escMode = TRUE;
d512 1
a512 1
          pEscParse->escMode = TRUE;
a520 5
        EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

        if (!pEscParse)
          return FALSE;

d533 1
a533 1
        pInMsg->u.pv.pVal = &pEscParse->intercepted_options;
d541 1
a541 6
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

      *pInMsg->u.pv.pVal = ESC_OPTS_MAP_GO1_2_EO(pEscParse->Options()) |
d551 1
a551 6
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

      DWORD fail_options = (pInMsg->u.pv.val & ESC_OPTS_MAP_GO1_2_EO(pEscParse->Options()));
d554 1
a554 1
        cerr << pPortName(hFromPort)
d559 1
a559 1
        pEscParse->OptionsDel(ESC_OPTS_MAP_EO_2_GO1(fail_options));
a572 5
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

d574 1
a574 1
        cerr << pPortName(hFromPort)
d578 2
a579 2
        pEscParse->escMode = FALSE;
        pEscParse->OptionsDel((DWORD)-1);
d592 1
a592 6
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

      pInMsg = pEscParse->Convert(pInMsg);
a596 5
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

d598 1
a598 1
      pInMsg->u.val &= ~VAL2MASK(GO1_O2V_MODEM_STATUS(pEscParse->Options()));
a601 5
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

d603 1
a603 1
      pInMsg->u.val &= ~VAL2MASK(GO1_O2V_LINE_STATUS(pEscParse->Options()));
d607 1
a607 6
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

      if (pEscParse->Options() & GO1_RBR_STATUS) {
d615 1
a615 6
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

      if (pEscParse->Options() & GO1_RLC_STATUS) {
d623 1
a623 6
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);

      if (!pEscParse)
        return FALSE;

      if (pEscParse->Options() & GO1_BREAK_STATUS) {
d644 3
a646 1
  Init,
d666 2
a667 1
      !ROUTINE_IS_VALID(pHubRoutines, pFilterName))
d679 1
@


1.9
log
@Extended the number of possible IN options
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.8 2008/11/25 16:40:40 vfrolov Exp $
d22 3
d488 3
a490 3
  switch (pInMsg->type) {
    case HUB_MSG_TYPE_COUNT_REPEATS:
      if (pInMsg->u.pv.val == HUB_MSG_TYPE_GET_IN_OPTS) {
d498 1
a498 1
    case HUB_MSG_TYPE_GET_IN_OPTS: {
d551 1
a551 1
    case HUB_MSG_TYPE_GET_ESC_OPTS: {
d566 1
a566 1
    case HUB_MSG_TYPE_FAIL_ESC_OPTS: {
d590 1
a590 1
    case HUB_MSG_TYPE_FAIL_IN_OPTS: {
d612 1
a612 1
    case HUB_MSG_TYPE_LINE_DATA: {
d627 1
a627 1
    case HUB_MSG_TYPE_MODEM_STATUS: {
d637 1
a637 1
    case HUB_MSG_TYPE_LINE_STATUS: {
d647 1
a647 1
    case HUB_MSG_TYPE_RBR_STATUS: {
d660 1
a660 1
    case HUB_MSG_TYPE_RLC_STATUS: {
d673 1
a673 1
    case HUB_MSG_TYPE_BREAK_STATUS: {
@


1.8
log
@Added assert for port handle
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.7 2008/11/24 12:37:00 vfrolov Exp $
d22 3
d111 2
a112 2
      maskMst = GO_O2V_MODEM_STATUS(_options);
      maskLsr = GO_O2V_LINE_STATUS(_options);
d117 2
a118 2
      maskMst = GO_O2V_MODEM_STATUS(_options);
      maskLsr = GO_O2V_LINE_STATUS(_options);
d199 1
a199 1
                if (Options() & GO_BREAK_STATUS) {
d256 1
a256 1
                if (Options() & GO_RBR_STATUS) {
d281 1
a281 1
                if (Options() & GO_RLC_STATUS) {
d347 5
a351 5
      GO_RBR_STATUS |
      GO_RLC_STATUS |
      GO_BREAK_STATUS |
      GO_V2O_MODEM_STATUS(-1) |
      GO_V2O_LINE_STATUS(-1)),
d496 4
a499 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(hFromPort);
d501 2
a502 2
      if (!pEscParse)
        return FALSE;
d504 2
a505 2
      // if the subsequent filters require interceptable options then
      // accept the received options and request the escape mode
d507 1
a507 1
      pEscParse->OptionsAdd((pEscParse->intercepted_options & ((Filter *)hFilter)->acceptableOptions));
d509 6
a514 2
      if (((Filter *)hFilter)->requestEscMode) {
        if (pEscParse->Options() && (pInMsg->u.pv.val & GO_ESCAPE_MODE)) {
a515 1
          *pInMsg->u.pv.pVal |= GO_ESCAPE_MODE; // request the escape mode
d517 4
a520 2
      } else {
        pEscParse->escMode = TRUE;
d522 6
d529 1
a529 1
      // get interceptable options from subsequent filters separately
d531 1
a531 1
      DWORD interceptable_options = (pInMsg->u.pv.val & (GO_ESCAPE_MODE | ((Filter *)hFilter)->acceptableOptions));
d533 1
a533 1
      pInMsg->u.pv.val &= ~interceptable_options;
d535 4
a538 1
      pInMsg = pMsgInsertNone(pInMsg, HUB_MSG_TYPE_EMPTY);
a539 1
      if (pInMsg) {
d542 2
a543 1
        pInMsg->u.pv.val = interceptable_options;
d554 1
a554 1
      *pInMsg->u.pv.pVal = ESC_OPTS_MAP_GO2EO(pEscParse->Options()) |
d569 1
a569 1
      DWORD fail_options = (pInMsg->u.pv.val & ESC_OPTS_MAP_GO2EO(pEscParse->Options()));
d577 2
a578 2
        pEscParse->OptionsDel(ESC_OPTS_MAP_EO2GO(fail_options));
        *pInMsg->u.pv.pVal |= ESC_OPTS_MAP_EO2GO(fail_options);
d588 3
d596 1
a596 1
      if ((pInMsg->u.val & GO_ESCAPE_MODE) && ((Filter *)hFilter)->requestEscMode) {
d605 1
a605 1
      pInMsg->u.val &= ~GO_ESCAPE_MODE; // hide from subsequent filters
d631 1
a631 1
      pInMsg->u.val &= ~VAL2MASK(GO_O2V_MODEM_STATUS(pEscParse->Options()));
d641 1
a641 1
      pInMsg->u.val &= ~VAL2MASK(GO_O2V_LINE_STATUS(pEscParse->Options()));
d650 1
a650 1
      if (pEscParse->Options() & GO_RBR_STATUS) {
d663 1
a663 1
      if (pEscParse->Options() & GO_RLC_STATUS) {
d676 1
a676 1
      if (pEscParse->Options() & GO_BREAK_STATUS) {
@


1.7
log
@Changed plugin API
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.6 2008/11/13 07:47:48 vfrolov Exp $
d22 3
d477 1
@


1.6
log
@Changed for staticaly linking
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.5 2008/10/22 08:27:26 vfrolov Exp $
d22 3
d319 4
a322 4
    void SetHub(HHUB _hHub) { hHub = _hHub; }
    EscParse *GetEscParse(int nPort);
    const char *PortName(int nPort) const { return pPortName(hHub, nPort); }
    const char *FilterName() const { return pFilterName(hHub, (HFILTER)this); }
d329 1
a329 1
    HHUB hHub;
d331 2
a332 2
    typedef map<int, EscParse*> PortsMap;
    typedef pair<int, EscParse*> PortPair;
d346 1
a346 1
    hHub(NULL)
d378 1
a378 1
EscParse *Filter::GetEscParse(int nPort)
d380 1
a380 1
  PortsMap::iterator iPair = portsMap.find(nPort);
d383 1
a383 1
      portsMap.insert(PortPair(nPort, NULL));
d385 1
a385 1
      iPair = portsMap.find(nPort);
d457 1
a457 1
    HHUB hHub)
d460 1
a460 1
  _ASSERTE(hHub != NULL);
d462 1
a462 1
  ((Filter *)hFilter)->SetHub(hHub);
d469 1
a469 1
    int nFromPort,
d489 1
a489 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d525 1
a525 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d540 1
a540 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d548 1
a548 1
        cerr << ((Filter *)hFilter)->PortName(nFromPort)
d564 1
a564 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d570 1
a570 1
        cerr << ((Filter *)hFilter)->PortName(nFromPort)
d588 1
a588 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d598 1
a598 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d608 1
a608 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d618 1
a618 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d631 1
a631 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
d644 1
a644 1
      EscParse *pEscParse = ((Filter *)hFilter)->GetEscParse(nFromPort);
@


1.5
log
@Added ability to set bytesize, parity and stopbits separately
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.4 2008/10/16 09:24:23 vfrolov Exp $
d22 3
d45 2
a46 1

d703 2
@


1.4
log
@Changed return type of ROUTINE_MSG_REPLACE_*() to BOOL
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.3 2008/09/30 08:28:32 vfrolov Exp $
d22 3
d153 1
a153 1
  if(!pMsgReplaceBuf(pMsg, HUB_MSG_TYPE_LINE_DATA, NULL, 0))
d273 3
a275 3
                      (VAL2LC_BYTESIZE(data[0])
                      |VAL2LC_PARITY(data[1])
                      |VAL2LC_STOPBITS(data[2])));
d527 1
a527 1
      if(!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
d551 1
a551 1
      if(!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
d618 1
a618 1
        if(!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
d631 1
a631 1
        if(!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
d644 1
a644 1
        if(!pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY))
@


1.3
log
@Added ability to control OUT1 and OUT2 pins
Added ability to get remote baud rate and line control settings
Added ability to set baud rate and line control
Added fallback to non escape mode
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.2 2008/08/29 13:02:37 vfrolov Exp $
d22 6
d140 2
d150 2
a151 1
  pMsg = pMsgReplaceBuf(pMsg, HUB_MSG_TYPE_LINE_DATA, NULL, 0);
d185 2
d188 2
d193 2
d196 2
d218 2
d221 2
d242 2
d245 2
d267 2
d273 2
d303 1
a303 3
  pMsg = Flush(pMsg);

  return pMsg;
d524 2
a525 1
      pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY);
d548 2
a549 1
      pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY);
d615 2
a616 1
        pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY);
d628 2
a629 1
        pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY);
d641 2
a642 1
        pMsgReplaceNone(pInMsg, HUB_MSG_TYPE_EMPTY);
@


1.2
log
@Added ESC_OPTS_MAP_EO2GO() and ESC_OPTS_MAP_GO2EO()
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.1 2008/08/22 17:02:59 vfrolov Exp $
d22 3
d107 2
a108 2
    WORD maskMst;
    WORD maskLsr;
a159 23
            _ASSERTE(subState >= 0 && subState <= 2);

            if (subState == 0) {
              subState++;
            } else if (subState == 1) {
              data[0] = ch;  // LSR
              subState++;
            } else if (subState == 2) {
              line_data.append(&ch, 1);
              if (Options() & GO_BREAK_STATUS) {
                pMsg = Flush(pMsg);
                pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_BREAK_STATUS, (data[0] & LINE_STATUS_BI) != 0);
              }
              if (maskLsr) {
                pMsg = Flush(pMsg);
                pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_LINE_STATUS, data[0] | VAL2MASK(maskLsr));
              }
              Reset();
            } else {
              cerr << "ERROR: SERIAL_LSRMST_LSR_DATA subState=" << subState << endl;
              Reset();
            }
            break;
d161 1
a161 1
            _ASSERTE(subState >= 0 && subState <= 1);
d163 28
a190 15
            if (subState == 0) {
              subState++;
            } else if (subState == 1) {
              if (Options() & GO_BREAK_STATUS) {
                pMsg = Flush(pMsg);
                pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_BREAK_STATUS, (ch & LINE_STATUS_BI) != 0);
              }
              if (maskLsr) {
                pMsg = Flush(pMsg);
                pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_LINE_STATUS, ch | VAL2MASK(maskLsr));
              }
              Reset();
            } else {
              cerr << "ERROR: SERIAL_LSRMST_LSR_NODATA subState=" << subState << endl;
              Reset();
d242 4
a245 1
                  pMsg = pMsgInsertVal(pMsg, HUB_MSG_TYPE_RLC_STATUS, *(ULONG *)data);
d319 19
d385 2
d389 7
a395 1
  << "  " << pProgPath << " --create-filter=pinmap --create-filter=" << GetPluginAbout()->pName << " --add-filters=0,1:pinmap," << GetPluginAbout()->pName << " COM1 COM2" << endl
d507 1
a507 1
      DWORD fail_options = (pInMsg->u.val & ESC_OPTS_MAP_GO2EO(pEscParse->Options()));
d513 1
a513 1
             << " not accepted" << endl;
d516 1
a540 14
      DWORD fail_options = (pEscParse->intercepted_options & ~pEscParse->Options());

      if (fail_options) {
        cerr << ((Filter *)hFilter)->PortName(nFromPort)
             << " WARNING: Intercepted option(s) 0x"
             << hex << fail_options << dec << " by filter "
             << ((Filter *)hFilter)->FilterName()
             << " will be ignored" << endl;

        // report not supported intercepted options to subsequent filters

        pInMsg->u.val |= fail_options;
      }

d558 6
a563 1
    case HUB_MSG_TYPE_MODEM_STATUS:
d565 1
a565 1
      pInMsg->u.val &= ~VAL2MASK(GO_O2V_MODEM_STATUS(((Filter *)hFilter)->acceptableOptions));
d567 7
a573 1
    case HUB_MSG_TYPE_LINE_STATUS:
d575 1
a575 1
      pInMsg->u.val &= ~VAL2MASK(GO_O2V_LINE_STATUS(((Filter *)hFilter)->acceptableOptions));
d577 8
a584 2
    case HUB_MSG_TYPE_RBR_STATUS:
      if (((Filter *)hFilter)->acceptableOptions & GO_RBR_STATUS) {
d589 8
a596 2
    case HUB_MSG_TYPE_RLC_STATUS:
      if (((Filter *)hFilter)->acceptableOptions & GO_RLC_STATUS) {
d601 8
a608 2
    case HUB_MSG_TYPE_BREAK_STATUS:
      if (((Filter *)hFilter)->acceptableOptions & GO_BREAK_STATUS) {
d613 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: $
d21 4
a24 1
 * $Log: $
a406 20
inline DWORD go2esc(DWORD goOpts)
{
  return
      ESC_OPTS_V2O_MST(GO_O2V_MODEM_STATUS(goOpts)) |
      ESC_OPTS_V2O_LSR(GO_O2V_LINE_STATUS(goOpts)) |
      ((goOpts & GO_RBR_STATUS) ? ESC_OPTS_RBR_STATUS : 0) |
      ((goOpts & GO_RLC_STATUS) ? ESC_OPTS_RLC_STATUS : 0) |
      ((goOpts & GO_BREAK_STATUS) ? ESC_OPTS_BREAK_STATUS : 0);
}

inline DWORD esc2go(DWORD escOpts)
{
  return
      GO_V2O_MODEM_STATUS(ESC_OPTS_O2V_MST(escOpts)) |
      GO_V2O_LINE_STATUS(ESC_OPTS_O2V_LSR(escOpts)) |
      ((escOpts & ESC_OPTS_RBR_STATUS) ? GO_RBR_STATUS : 0) |
      ((escOpts & ESC_OPTS_RLC_STATUS) ? GO_RLC_STATUS : 0) |
      ((escOpts & ESC_OPTS_BREAK_STATUS) ? GO_BREAK_STATUS : 0);
}

d470 1
a470 1
      *pInMsg->u.pv.pVal = go2esc(pEscParse->Options()) |
d484 1
a484 1
      DWORD fail_options = (pInMsg->u.val & go2esc(pEscParse->Options()));
d492 1
a492 1
        pEscParse->OptionsDel(esc2go(fail_options));
@

