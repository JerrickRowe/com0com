head	1.18;
access;
symbols
	v2_1_0_0:1.18
	v2_0_1_0:1.18
	RELEASED:1.18
	v2_0_0_0:1.18;
locks; strict;
comment	@// @;


1.18
date	2009.02.17.14.17.37;	author vfrolov;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.02.15.21.43;	author vfrolov;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.23.16.48.49;	author vfrolov;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.22.09.40.46;	author vfrolov;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.18.16.50.52;	author vfrolov;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.11.13.10.23;	author vfrolov;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.05.14.23.19;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.25.16.40.40;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.24.12.37.00;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.21.08.16.56;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.13.07.52.20;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.12.08.46.39;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.16.16.02.34;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.16.06.46.13;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.02.14.01.43;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.30.08.28.32;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.29.15.17.07;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.29.13.13.04;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Redesigned timer's API
@
text
@/*
 * $Id: filter.cpp,v 1.17 2009/02/02 15:21:43 vfrolov Exp $
 *
 * Copyright (c) 2008-2009 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: filter.cpp,v $
 * Revision 1.17  2009/02/02 15:21:43  vfrolov
 * Optimized filter's API
 *
 * Revision 1.16  2009/01/23 16:48:49  vfrolov
 * Exported timer routines
 *
 * Revision 1.15  2008/12/22 09:40:46  vfrolov
 * Optimized message switching
 *
 * Revision 1.14  2008/12/18 16:50:52  vfrolov
 * Extended the number of possible IN options
 *
 * Revision 1.13  2008/12/11 13:10:23  vfrolov
 * Added PURGE_TX
 *
 * Revision 1.12  2008/12/05 14:23:19  vfrolov
 * Output config in loadable format
 *
 * Revision 1.11  2008/11/25 16:40:40  vfrolov
 * Added assert for port handle
 *
 * Revision 1.10  2008/11/24 12:37:00  vfrolov
 * Changed plugin API
 *
 * Revision 1.9  2008/11/21 08:16:56  vfrolov
 * Added HUB_MSG_TYPE_LOOP_TEST
 *
 * Revision 1.8  2008/11/13 07:52:20  vfrolov
 * Changed for staticaly linking
 *
 * Revision 1.7  2008/11/12 08:46:39  vfrolov
 * Fixed TYPE_LC and SET_LSR tracing
 *
 * Revision 1.6  2008/10/16 16:02:34  vfrolov
 * Added LBR_STATUS and LLC_STATUS
 *
 * Revision 1.5  2008/10/16 06:46:13  vfrolov
 * Added PIN_STATE_* for DCE
 * Added HUB_MSG_TYPE_SET_LSR
 *
 * Revision 1.4  2008/10/02 14:01:43  vfrolov
 * Added help
 *
 * Revision 1.3  2008/09/30 08:28:32  vfrolov
 * Added ability to control OUT1 and OUT2 pins
 * Added ability to get remote baud rate and line control settings
 * Added ability to set baud rate and line control
 * Added fallback to non escape mode
 *
 * Revision 1.2  2008/08/29 15:17:07  vfrolov
 * Added printing command line and config
 *
 * Revision 1.1  2008/08/29 13:13:04  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"
#include "../plugins_api.h"
///////////////////////////////////////////////////////////////
namespace FilterTrace {
///////////////////////////////////////////////////////////////
#ifndef _DEBUG
  #define DEBUG_PARAM(par)
#else   /* _DEBUG */
  #define DEBUG_PARAM(par) par
#endif  /* _DEBUG */
///////////////////////////////////////////////////////////////
static ROUTINE_PORT_NAME_A *pPortName = NULL;
static ROUTINE_FILTER_NAME_A *pFilterName = NULL;
static ROUTINE_FILTERPORT *pFilterPort;
///////////////////////////////////////////////////////////////
static void PrintTime(ostream &tout);
///////////////////////////////////////////////////////////////
const char *GetParam(const char *pArg, const char *pPattern)
{
  size_t lenPattern = strlen(pPattern);

  if (_strnicmp(pArg, pPattern, lenPattern) != 0)
    return NULL;

  return pArg + lenPattern;
}
///////////////////////////////////////////////////////////////
class TraceConfig {
  public:
    TraceConfig() : pTraceStream(NULL) {}

    void SetTracePath(const char *pPath);
    ostream *GetTraceStream();
    void PrintToAllTraceStreams(const char *pStr);
    stringstream buf;

  private:
    string path;
    ostream *pTraceStream;

    typedef set<ostream*> Streams;

    Streams traceStreams;
};

void TraceConfig::SetTracePath(const char *pPath) {
  path = pPath;
  pTraceStream = NULL;
}

ostream *TraceConfig::GetTraceStream() {
  if (pTraceStream)
    return pTraceStream;

  if (path.empty()) {
    pTraceStream = &cout;
  } else {
    ofstream *pStream = new ofstream(path.c_str());

    if (!pStream) {
      cerr << "No enough memory." << endl;
      exit(2);
    }

    if (!pStream->is_open()) {
      cerr << "Can't open " << path << endl;
      exit(2);
    }

    pTraceStream = pStream;
  }

  traceStreams.insert(pTraceStream);

  return pTraceStream;
}

void TraceConfig::PrintToAllTraceStreams(const char *pStr)
{
  for (Streams::const_iterator iS = traceStreams.begin() ; iS != traceStreams.end() ; iS++)
    (**iS) << pStr;
}
///////////////////////////////////////////////////////////////
class Valid {
  public:
    Valid() : isValid(TRUE) {}
    void Invalidate() { isValid = FALSE; }
    BOOL IsValid() const { return isValid; }
  private:
    BOOL isValid;
};
///////////////////////////////////////////////////////////////
class Filter : public Valid {
  public:
    Filter(const char *_pName, TraceConfig &config, int argc, const char *const argv[]);

    const char *FilterName() const { return pName; }

    ostream *pTraceStream;

  private:
    const char *pName;
};

Filter::Filter(const char *_pName, TraceConfig &config, int argc, const char *const argv[])
  : pName(_pName),
    pTraceStream(NULL)
{
  for (const char *const *pArgs = &argv[1] ; argc > 1 ; pArgs++, argc--) {
    const char *pArg = GetParam(*pArgs, "--");

    if (!pArg) {
      cerr << "Unknown option " << *pArgs << endl;
      Invalidate();
      continue;
    }

    {
      cerr << "Unknown option " << *pArgs << endl;
      Invalidate();
    }
  }

  if (!pTraceStream)
    pTraceStream = config.GetTraceStream();
}
///////////////////////////////////////////////////////////////
static PLUGIN_TYPE CALLBACK GetPluginType()
{
  return PLUGIN_TYPE_FILTER;
}
///////////////////////////////////////////////////////////////
static const PLUGIN_ABOUT_A about = {
  sizeof(PLUGIN_ABOUT_A),
  "trace",
  "Copyright (c) 2008 Vyacheslav Frolov",
  "GNU General Public License",
  "Trace filter",
};

static const PLUGIN_ABOUT_A * CALLBACK GetPluginAbout()
{
  return &about;
}
///////////////////////////////////////////////////////////////
static void CALLBACK Help(const char *pProgPath)
{
  cerr
  << "Usage:" << endl
  << "  " << pProgPath << " ... [<global options>] --create-filter=" << GetPluginAbout()->pName << "[,<FID>][:<options>] ... --add-filters=<ports>:[...,]<FID>[,...] ..." << endl
  << endl
  << "Global options:" << endl
  << "  --trace-file=<path>   - redirect trace to <path>. Cancel redirection if" << endl
  << "                          <path> is empty." << endl
  << endl
  << "Options:" << endl
  << endl
  << "Examples:" << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      COM4" << endl
  << endl
  << "      --trace-file=com.log" << endl
  << "      --create-filter=trace,com,com" << endl
  << "      --create-filter=pin2con,com,pin2con" << endl
  << "      --trace-file=p2c.log" << endl
  << "      --create-filter=trace,com,p2c" << endl
  << "      --create-filter=awakseq,com,awakseq:--awak-seq=aaa" << endl
  << "      --trace-file=awk.log" << endl
  << "      --create-filter=trace,com,awk" << endl
  << "      --add-filters=0:com" << endl
  << endl
  << "      --use-driver=tcp" << endl
  << "      1.1.1.1:23" << endl
  << endl
  << "      --trace-file=tcp.log" << endl
  << "      --create-filter=trace,tcp,tcp" << endl
  << "      --create-filter=telnet,tcp,telnet" << endl
  << "      --trace-file=tel.log" << endl
  << "      --create-filter=trace,tcp,tel" << endl
  << "      --add-filters=1:tcp" << endl
  << endl
  << "      _END_" << endl
  << "    - Trace data to different files by this way:" << endl
  << "      COM4 <---> pin2con <---> awakseq <--->   <---> telnet <---> 1.1.1.1:23" << endl
  << "             |             |             |       |            |" << endl
  << "          com.log       p2c.log       awk.log tel.log      tcp.log" << endl
  ;
}
///////////////////////////////////////////////////////////////
static HCONFIG CALLBACK ConfigStart()
{
  TraceConfig *pConfig = new TraceConfig;

  if (!pConfig) {
    cerr << "No enough memory." << endl;
    exit(2);
  }

  PrintTime(pConfig->buf);
  pConfig->buf << "Command Line:" << endl
               << "  {" << GetCommandLine() << "}" << endl;

  PrintTime(pConfig->buf);
  pConfig->buf << "Config:";
  pConfig->buf << endl << "_BEGIN_";

  return (HCONFIG)pConfig;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK Config(
    HCONFIG hConfig,
    const char *pArg)
{
  _ASSERTE(hConfig != NULL);

  ((TraceConfig *)hConfig)->buf << endl << "  " << pArg;

  const char *pParam;

  if ((pParam = GetParam(pArg, "--trace-file=")) != NULL) {
    ((TraceConfig *)hConfig)->SetTracePath(pParam);
  } else {
    return FALSE;
  }

  return TRUE;
}
///////////////////////////////////////////////////////////////
static void CALLBACK ConfigStop(
    HCONFIG hConfig)
{
  _ASSERTE(hConfig != NULL);

  ((TraceConfig *)hConfig)->buf << endl << "_END_" << endl;
  ((TraceConfig *)hConfig)->PrintToAllTraceStreams(((TraceConfig *)hConfig)->buf.str().c_str());

  delete (TraceConfig *)hConfig;
}
///////////////////////////////////////////////////////////////
static HFILTER CALLBACK Create(
    HMASTERFILTER hMasterFilter,
    HCONFIG hConfig,
    int argc,
    const char *const argv[])
{
  _ASSERTE(hConfig != NULL);
  _ASSERTE(hMasterFilter != NULL);

  Filter *pFilter = new Filter(pFilterName(hMasterFilter), *(TraceConfig *)hConfig, argc, argv);

  if (!pFilter) {
    cerr << "No enough memory." << endl;
    exit(2);
  }

  if (!pFilter->IsValid()) {
    delete pFilter;
    return NULL;
  }

  return (HFILTER)pFilter;
}
///////////////////////////////////////////////////////////////
static void CALLBACK Delete(
    HFILTER hFilter)
{
  _ASSERTE(hFilter != NULL);

  delete (Filter *)hFilter;
}
///////////////////////////////////////////////////////////////
static HFILTERINSTANCE CALLBACK CreateInstance(
    HMASTERFILTERINSTANCE hMasterFilterInstance)
{
  _ASSERTE(hMasterFilterInstance != NULL);

  HMASTERPORT hMasterPort = pFilterPort(hMasterFilterInstance);

  _ASSERTE(hMasterPort != NULL);

  return (HFILTERINSTANCE)pPortName(hMasterPort);
}
///////////////////////////////////////////////////////////////
static void CALLBACK DeleteInstance(
    HFILTERINSTANCE DEBUG_PARAM(hFilterInstance))
{
  _ASSERTE(hFilterInstance != NULL);
}
///////////////////////////////////////////////////////////////
static void PrintTime(ostream &tout)
{
  char f = tout.fill('0');

  SYSTEMTIME time;

  ::GetLocalTime(&time);

  tout << setw(4) << time.wYear << "/"
       << setw(2) << time.wMonth << "/"
       << setw(2) << time.wDay << " "
       << setw(2) << time.wHour << ":"
       << setw(2) << time.wMinute << ":"
       << setw(2) << time.wSecond << "."
       << setw(3) << time.wMilliseconds << " ";

  tout.fill(f);
}
///////////////////////////////////////////////////////////////
struct CODE2NAME {
  DWORD code;
  const char *name;
};
#define TOCODE2NAME(p, s) { (ULONG)p##s, #s }

static void PrintCode(ostream &tout, const CODE2NAME *pTable, DWORD code)
{
  if (pTable) {
    while (pTable->name) {
      if (pTable->code == code) {
        tout << pTable->name;
        return;
      }
      pTable++;
    }
  }

  tout << "0x" << hex << code << dec;
}
///////////////////////////////////////////////////////////////
struct FIELD2NAME {
  DWORD field;
  DWORD mask;
  const char *name;
};
#define TOFIELD2NAME2(p, s) { (ULONG)p##s, (ULONG)p##s, #s }

static BOOL PrintFields(
    ostream &tout,
    const FIELD2NAME *pTable,
    DWORD fields,
    BOOL delimitNext = FALSE,
    const char *pUnknownPrefix = "",
    const char *pDelimiter = "|")
{
  if (pTable) {
    while (pTable->name) {
      DWORD field = (fields & pTable->mask);

      if (field == pTable->field) {
        fields &= ~pTable->mask;
        if (delimitNext)
          tout << pDelimiter;
        else
          delimitNext = TRUE;

        tout << pTable->name;
      }
      pTable++;
    }
  }

  if (fields) {
    if (delimitNext)
      tout << pDelimiter;
    else
      delimitNext = TRUE;

    tout << pUnknownPrefix << "0x" << hex << fields << dec;
  }

  return delimitNext;
}
///////////////////////////////////////////////////////////////
static const CODE2NAME codeNameTableHubMsg[] = {
  TOCODE2NAME(HUB_MSG_TYPE_, EMPTY),
  TOCODE2NAME(HUB_MSG_TYPE_, LINE_DATA),
  TOCODE2NAME(HUB_MSG_TYPE_, CONNECT),
  TOCODE2NAME(HUB_MSG_TYPE_, MODEM_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, LINE_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, SET_PIN_STATE),
  TOCODE2NAME(HUB_MSG_TYPE_, GET_IN_OPTS),
  TOCODE2NAME(HUB_MSG_TYPE_, SET_OUT_OPTS),
  TOCODE2NAME(HUB_MSG_TYPE_, FAIL_IN_OPTS),
  TOCODE2NAME(HUB_MSG_TYPE_, RBR_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, RLC_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, COUNT_REPEATS),
  TOCODE2NAME(HUB_MSG_TYPE_, GET_ESC_OPTS),
  TOCODE2NAME(HUB_MSG_TYPE_, FAIL_ESC_OPTS),
  TOCODE2NAME(HUB_MSG_TYPE_, BREAK_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, SET_BR),
  TOCODE2NAME(HUB_MSG_TYPE_, SET_LC),
  TOCODE2NAME(HUB_MSG_TYPE_, SET_LSR),
  TOCODE2NAME(HUB_MSG_TYPE_, LBR_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, LLC_STATUS),
  TOCODE2NAME(HUB_MSG_TYPE_, LOOP_TEST),
  TOCODE2NAME(HUB_MSG_TYPE_, ADD_XOFF_XON),
  TOCODE2NAME(HUB_MSG_TYPE_, PURGE_TX_IN),
  TOCODE2NAME(HUB_MSG_TYPE_, PURGE_TX),
  TOCODE2NAME(HUB_MSG_TYPE_, TICK),
  {0, NULL}
};
///////////////////////////////////////////////////////////////
static const CODE2NAME codeNameTableParity[] = {
  NOPARITY,    "N",
  ODDPARITY,   "O",
  EVENPARITY,  "E",
  MARKPARITY,  "M",
  SPACEPARITY, "S",
  {0, NULL}
};
///////////////////////////////////////////////////////////////
static const CODE2NAME codeNameTableStopBits
[] = {
  ONESTOPBIT,   "1",
  ONE5STOPBITS, "1.5",
  TWOSTOPBITS,  "2",
  {0, NULL}
};
///////////////////////////////////////////////////////////////
static const FIELD2NAME fieldNameTableModemStatus[] = {
  TOFIELD2NAME2(MODEM_STATUS_, DCTS),
  TOFIELD2NAME2(MODEM_STATUS_, DDSR),
  TOFIELD2NAME2(MODEM_STATUS_, TERI),
  TOFIELD2NAME2(MODEM_STATUS_, DDCD),
  TOFIELD2NAME2(MODEM_STATUS_, CTS),
  TOFIELD2NAME2(MODEM_STATUS_, DSR),
  TOFIELD2NAME2(MODEM_STATUS_, RI),
  TOFIELD2NAME2(MODEM_STATUS_, DCD),
  {0, 0, NULL}
};
///////////////////////////////////////////////////////////////
static const FIELD2NAME fieldNameTableLineStatus[] = {
  TOFIELD2NAME2(LINE_STATUS_, DR),
  TOFIELD2NAME2(LINE_STATUS_, OE),
  TOFIELD2NAME2(LINE_STATUS_, PE),
  TOFIELD2NAME2(LINE_STATUS_, FE),
  TOFIELD2NAME2(LINE_STATUS_, BI),
  TOFIELD2NAME2(LINE_STATUS_, THRE),
  TOFIELD2NAME2(LINE_STATUS_, TEMT),
  TOFIELD2NAME2(LINE_STATUS_, FIFOERR),
  {0, 0, NULL}
};
///////////////////////////////////////////////////////////////
static const FIELD2NAME fieldNameTableGo0Options[] = {
  TOFIELD2NAME2(GO0_, LBR_STATUS),
  TOFIELD2NAME2(GO0_, LLC_STATUS),
  TOFIELD2NAME2(GO0_, ESCAPE_MODE),
  {0, 0, NULL}
};
///////////////////////////////////////////////////////////////
static const FIELD2NAME fieldNameTableGo1Options[] = {
  TOFIELD2NAME2(GO1_, RBR_STATUS),
  TOFIELD2NAME2(GO1_, RLC_STATUS),
  TOFIELD2NAME2(GO1_, BREAK_STATUS),
  {0, 0, NULL}
};
///////////////////////////////////////////////////////////////
static const FIELD2NAME codeNameTableSetPinState[] = {
  TOFIELD2NAME2(PIN_STATE_, RTS),
  TOFIELD2NAME2(PIN_STATE_, DTR),
  TOFIELD2NAME2(PIN_STATE_, OUT1),
  TOFIELD2NAME2(PIN_STATE_, OUT2),
  TOFIELD2NAME2(PIN_STATE_, CTS),
  TOFIELD2NAME2(PIN_STATE_, DSR),
  TOFIELD2NAME2(PIN_STATE_, RI),
  TOFIELD2NAME2(PIN_STATE_, DCD),
  TOFIELD2NAME2(PIN_STATE_, BREAK),
  {0, 0, NULL}
};
///////////////////////////////////////////////////////////////
static const FIELD2NAME fieldNameTableSoOptions[] = {
  TOFIELD2NAME2(SO_, SET_BR),
  TOFIELD2NAME2(SO_, SET_LC),
  {0, 0, NULL}
};
///////////////////////////////////////////////////////////////
static BOOL PrintGoOptions(
    ostream &tout,
    DWORD fields,
    BOOL delimitNext = FALSE)
{
  int iGo = GO_O2I(fields);

  fields &= ~GO_I2O(-1);

  const FIELD2NAME *pTable;

  switch (iGo) {
    case 0:
      pTable = fieldNameTableGo0Options;
      break;
    case 1:
      delimitNext = PrintFields(tout, fieldNameTableModemStatus, GO1_O2V_MODEM_STATUS(fields), delimitNext, "MST_");
      delimitNext = PrintFields(tout, fieldNameTableLineStatus, GO1_O2V_LINE_STATUS(fields), delimitNext, "LSR_");
      fields &= ~(GO1_V2O_MODEM_STATUS(-1) | GO1_V2O_LINE_STATUS(-1));
      pTable = fieldNameTableGo1Options;
      break;
    default:
      pTable = NULL;
  }

  stringstream buf;

  buf << "GO" << iGo << "_";

  delimitNext = PrintFields(tout, pTable, fields, delimitNext, buf.str().c_str());

  return delimitNext;
}
///////////////////////////////////////////////////////////////
static BOOL PrintEscOptions(
    ostream &tout,
    DWORD fields,
    BOOL delimitNext = FALSE)
{
  PrintGoOptions(tout, ESC_OPTS_MAP_EO_2_GO1(fields) | GO_I2O(1), delimitNext);
  PrintFields(tout, NULL, fields & ~ESC_OPTS_MAP_GO1_2_EO(-1), delimitNext);

  return delimitNext;
}
///////////////////////////////////////////////////////////////
static void PrintMaskedFields(ostream &tout, const FIELD2NAME *pTable, DWORD maskedFields)
{
    WORD mask = MASK2VAL(maskedFields);

    tout << "SET[";
    PrintFields(tout, pTable, maskedFields & mask);
    tout << "] CLR[";
    PrintFields(tout, pTable, ~maskedFields & mask);
    tout << "]";
}
///////////////////////////////////////////////////////////////
static void PrintBuf(ostream &tout, const BYTE *pData, DWORD size)
{
  tout << "[" << size << "]:";

  ios_base::fmtflags b = tout.setf(ios_base::hex, ios_base::basefield);
  char f = tout.fill('0');

  while (size) {
    tout << endl << "  ";

    stringstream buf;

    int i = 0;

    for ( ; i < 16 && size ; i++, size--) {
      BYTE ch = *pData++;

      tout << setw(2) << (unsigned)ch << " ";
      buf << (char)((ch >= 0x20 && ch < 0x7F) ? ch : '.');
    }

    for ( ; i < 16 ; i++) {
      tout << "   ";
      buf << " ";
    }

    tout << " * " << buf.str() << " *";
  }

  tout.fill(f);
  tout.setf(b, ios_base::basefield);
}
///////////////////////////////////////////////////////////////
static void PrintMsgType(ostream &tout, DWORD msgType)
{
  tout << "MSG_";
  PrintCode(tout, codeNameTableHubMsg, msgType);
}
///////////////////////////////////////////////////////////////
static void PrintVal(ostream &tout, DWORD msgType, DWORD val)
{
  switch (msgType & HUB_MSG_VAL_TYPES_MASK) {
    case HUB_MSG_VAL_TYPE_BOOL:
      tout << (val ? "true" : "false");
      break;
    case HUB_MSG_VAL_TYPE_MSG_TYPE:
      PrintMsgType(tout, val);
      break;
    case HUB_MSG_VAL_TYPE_UINT:
      tout << val;
      break;
    case HUB_MSG_VAL_TYPE_LC:
      if (val & LC_MASK_BYTESIZE)
        tout << (unsigned)LC2VAL_BYTESIZE(val);
      else
        tout << 'x';

      tout << '-';

      if (val & LC_MASK_PARITY)
        PrintCode(tout, codeNameTableParity, LC2VAL_PARITY(val));
      else
        tout << 'x';

      tout << '-';

      if (val & LC_MASK_STOPBITS)
        PrintCode(tout, codeNameTableStopBits, LC2VAL_STOPBITS(val));
      else
        tout << 'x';
      break;
    default:
      tout << "0x" << hex << val << dec;
  }
}
///////////////////////////////////////////////////////////////
static void PrintMsgBody(ostream &tout, HUB_MSG *pMsg)
{
  switch (pMsg->type & HUB_MSG_UNION_TYPES_MASK) {
    case HUB_MSG_UNION_TYPE_NONE:
      break;
    case HUB_MSG_UNION_TYPE_BUF:
      PrintBuf(tout, pMsg->u.buf.pBuf, pMsg->u.buf.size);
      break;
    case HUB_MSG_UNION_TYPE_VAL:
      PrintVal(tout, pMsg->type, pMsg->u.val);
      break;
    case HUB_MSG_UNION_TYPE_PVAL:
      tout << hex << "&" << pMsg->u.pv.pVal << "[0x" << *pMsg->u.pv.pVal << dec << "] ";
      PrintVal(tout, pMsg->type, pMsg->u.pv.val);
      break;
    case HUB_MSG_UNION_TYPE_HVAL:
      tout << pMsg->u.hVal;
      break;
    case HUB_MSG_UNION_TYPE_HVAL2:
      tout << pMsg->u.hv2.hVal0 << " " << pMsg->u.hv2.hVal1;
      break;
    default:
      tout  << "???";
  }
}
///////////////////////////////////////////////////////////////
static void PrintMsg(ostream &tout, HUB_MSG *pMsg)
{
  PrintMsgType(tout, pMsg->type);

  tout  << " {";

  switch (HUB_MSG_T2N(pMsg->type)) {
    case HUB_MSG_T2N(HUB_MSG_TYPE_MODEM_STATUS):
      PrintMaskedFields(tout, fieldNameTableModemStatus, pMsg->u.val);
      break;
    case HUB_MSG_T2N(HUB_MSG_TYPE_LINE_STATUS):
    case HUB_MSG_T2N(HUB_MSG_TYPE_SET_LSR):
      PrintMaskedFields(tout, fieldNameTableLineStatus, pMsg->u.val);
      break;
    case HUB_MSG_T2N(HUB_MSG_TYPE_SET_PIN_STATE):
      PrintMaskedFields(tout, codeNameTableSetPinState, pMsg->u.val);
      break;
    case HUB_MSG_T2N(HUB_MSG_TYPE_SET_OUT_OPTS): {
      tout << "[";
      BOOL delimitNext = FALSE;
      delimitNext = PrintFields(tout, codeNameTableSetPinState, SO_O2V_PIN_STATE(pMsg->u.val), delimitNext, "SET_");
      PrintFields(tout, fieldNameTableSoOptions, pMsg->u.val & ~SO_V2O_PIN_STATE(-1), delimitNext);
      tout << "]";
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_GET_IN_OPTS): {
      tout << hex << "&" << pMsg->u.pv.pVal << "[" << dec;
      PrintGoOptions(tout, (*pMsg->u.pv.pVal & ~(GO_I2O(-1))) | (pMsg->u.pv.val & GO_I2O(-1)));
      tout << "] [";
      PrintGoOptions(tout, pMsg->u.pv.val);
      tout << "]";
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_FAIL_IN_OPTS): {
      tout << "[";
      PrintGoOptions(tout, pMsg->u.val);
      tout << "]";
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_GET_ESC_OPTS): {
      tout << hex << "&" << pMsg->u.pv.pVal << "[" << dec;
      tout << "CHAR_0x" << hex << (unsigned)ESC_OPTS_O2V_ESCCHAR(*pMsg->u.pv.pVal) << dec;
      PrintEscOptions(tout, *pMsg->u.pv.pVal & ~ESC_OPTS_V2O_ESCCHAR(-1), TRUE);
      tout << "]";
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_FAIL_ESC_OPTS): {
      tout << hex << "&" << pMsg->u.pv.pVal << "[" << dec;
      PrintGoOptions(tout, (*pMsg->u.pv.pVal & ~(GO_I2O(-1))) | GO_I2O(1));
      tout << "] [";
      PrintEscOptions(tout, pMsg->u.pv.val & ~ESC_OPTS_V2O_ESCCHAR(-1));
      tout << "]";
      break;
    }
    default:
      PrintMsgBody(tout, pMsg);
  }

  tout  << "}" << endl;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK InMethod(
    HFILTER hFilter,
    HFILTERINSTANCE hFilterInstance,
    HUB_MSG *pInMsg,
    HUB_MSG **DEBUG_PARAM(ppEchoMsg))
{
  _ASSERTE(hFilter != NULL);
  _ASSERTE(hFilterInstance != NULL);
  _ASSERTE(pInMsg != NULL);
  _ASSERTE(ppEchoMsg != NULL);
  _ASSERTE(*ppEchoMsg == NULL);

  _ASSERTE(((Filter *)hFilter)->pTraceStream != NULL);
  ostream &tout = *((Filter *)hFilter)->pTraceStream;

  PrintTime(tout);

  tout << (const char *)hFilterInstance << "-("
       << ((Filter *)hFilter)->FilterName() << ")->: ";

  PrintMsg(tout, pInMsg);

  return TRUE;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK OutMethod(
    HFILTER hFilter,
    HFILTERINSTANCE hFilterInstance,
    HMASTERPORT hFromPort,
    HUB_MSG *pOutMsg)
{
  _ASSERTE(hFilter != NULL);
  _ASSERTE(hFilterInstance != NULL);
  _ASSERTE(hFromPort != NULL);
  _ASSERTE(pOutMsg != NULL);

  _ASSERTE(((Filter *)hFilter)->pTraceStream != NULL);
  ostream &tout = *((Filter *)hFilter)->pTraceStream;

  PrintTime(tout);

  tout << (const char *)hFilterInstance << "<-("
       << ((Filter *)hFilter)->FilterName() << ")-"
       << pPortName(hFromPort) << ": ";

  PrintMsg(tout, pOutMsg);

  return TRUE;
}
///////////////////////////////////////////////////////////////
static const FILTER_ROUTINES_A routines = {
  sizeof(FILTER_ROUTINES_A),
  GetPluginType,
  GetPluginAbout,
  Help,
  ConfigStart,
  Config,
  ConfigStop,
  Create,
  Delete,
  CreateInstance,
  DeleteInstance,
  InMethod,
  OutMethod,
};

static const PLUGIN_ROUTINES_A *const plugins[] = {
  (const PLUGIN_ROUTINES_A *)&routines,
  NULL
};
///////////////////////////////////////////////////////////////
PLUGIN_INIT_A InitA;
const PLUGIN_ROUTINES_A *const * CALLBACK InitA(
    const HUB_ROUTINES_A * pHubRoutines)
{
  if (!ROUTINE_IS_VALID(pHubRoutines, pPortName) ||
      !ROUTINE_IS_VALID(pHubRoutines, pFilterName) ||
      !ROUTINE_IS_VALID(pHubRoutines, pFilterPort))
  {
    return NULL;
  }

  pPortName = pHubRoutines->pPortName;
  pFilterName = pHubRoutines->pFilterName;
  pFilterPort = pHubRoutines->pFilterPort;

  return plugins;
}
///////////////////////////////////////////////////////////////
} // end namespace
///////////////////////////////////////////////////////////////
@


1.17
log
@Optimized filter's API
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.16 2009/01/23 16:48:49 vfrolov Exp $
d22 3
d705 3
@


1.16
log
@Exported timer routines
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.15 2008/12/22 09:40:46 vfrolov Exp $
d22 3
d89 1
d170 1
a170 1
    Filter(TraceConfig &config, int argc, const char *const argv[]);
a171 1
    void SetFilterName(const char *_pName) { pName = _pName; }
d180 3
a182 3
Filter::Filter(TraceConfig &config, int argc, const char *const argv[])
  : pTraceStream(NULL),
    pName(NULL)
d194 1
a194 1
      cerr << "Unknown option --" << pArg << endl;
d316 1
d322 1
d324 1
a324 1
  Filter *pFilter = new Filter(*(TraceConfig *)hConfig, argc, argv);
d326 4
a329 2
  if (!pFilter)
    return NULL;
d339 2
a340 3
static BOOL CALLBACK Init(
    HFILTER hFilter,
    HMASTERFILTER hMasterFilter)
a342 1
  _ASSERTE(hMasterFilter != NULL);
d344 11
a354 1
  ((Filter *)hFilter)->SetFilterName(pFilterName(hMasterFilter));
d356 7
a362 1
  return TRUE;
d770 1
a770 1
    HMASTERPORT hFromPort,
d775 1
a775 1
  _ASSERTE(hFromPort != NULL);
d785 1
a785 1
  tout << pPortName(hFromPort) << "-("
d795 1
a796 1
    HMASTERPORT hToPort,
d800 1
a801 1
  _ASSERTE(hToPort != NULL);
d809 1
a809 1
  tout << pPortName(hToPort) << "<-("
d827 3
a829 1
  Init,
d844 2
a845 1
      !ROUTINE_IS_VALID(pHubRoutines, pFilterName))
d852 1
@


1.15
log
@Optimized message switching
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.14 2008/12/18 16:50:52 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008 Vyacheslav Frolov
d22 3
d453 1
@


1.14
log
@Extended the number of possible IN options
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.13 2008/12/11 13:10:23 vfrolov Exp $
d22 3
d688 2
a689 2
  switch (pMsg->type) {
    case HUB_MSG_TYPE_MODEM_STATUS:
d692 2
a693 2
    case HUB_MSG_TYPE_LINE_STATUS:
    case HUB_MSG_TYPE_SET_LSR:
d696 1
a696 1
    case HUB_MSG_TYPE_SET_PIN_STATE:
d699 1
a699 1
    case HUB_MSG_TYPE_SET_OUT_OPTS: {
d707 1
a707 1
    case HUB_MSG_TYPE_GET_IN_OPTS: {
d715 1
a715 1
    case HUB_MSG_TYPE_FAIL_IN_OPTS: {
d721 1
a721 1
    case HUB_MSG_TYPE_GET_ESC_OPTS: {
d728 1
a728 1
    case HUB_MSG_TYPE_FAIL_ESC_OPTS: {
@


1.13
log
@Added PURGE_TX
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.12 2008/12/05 14:23:19 vfrolov Exp $
d22 3
d491 11
a501 7
static const FIELD2NAME fieldNameTableGoOptions[] = {
  TOFIELD2NAME2(GO_, RBR_STATUS),
  TOFIELD2NAME2(GO_, RLC_STATUS),
  TOFIELD2NAME2(GO_, LBR_STATUS),
  TOFIELD2NAME2(GO_, LLC_STATUS),
  TOFIELD2NAME2(GO_, BREAK_STATUS),
  TOFIELD2NAME2(GO_, ESCAPE_MODE),
d527 1
a527 2
    BOOL delimitNext = FALSE,
    const char *pUnknownPrefix = "")
d529 25
a553 3
  delimitNext = PrintFields(tout, fieldNameTableModemStatus, GO_O2V_MODEM_STATUS(fields), delimitNext, "MST_");
  delimitNext = PrintFields(tout, fieldNameTableLineStatus, GO_O2V_LINE_STATUS(fields), delimitNext, "LSR_");
  delimitNext = PrintFields(tout, fieldNameTableGoOptions, fields & ~(GO_V2O_MODEM_STATUS(-1) | GO_V2O_LINE_STATUS(-1)), delimitNext, pUnknownPrefix);
d563 2
a564 2
  PrintGoOptions(tout, ESC_OPTS_MAP_EO2GO(fields), delimitNext, "GO_");
  PrintFields(tout, NULL, fields & ~ESC_OPTS_MAP_GO2EO(-1), delimitNext);
d706 1
a706 1
      PrintGoOptions(tout, *pMsg->u.pv.pVal);
d727 1
a727 1
      PrintGoOptions(tout, *pMsg->u.pv.pVal);
@


1.12
log
@Output config in loadable format
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.11 2008/11/25 16:40:40 vfrolov Exp $
d22 3
d442 2
@


1.11
log
@Added assert for port handle
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.10 2008/11/24 12:37:00 vfrolov Exp $
d22 3
d264 2
a265 1
  pConfig->buf << "Config: {";
d276 1
a276 1
  ((TraceConfig *)hConfig)->buf << endl << "  {" << pArg << "}";
d294 1
a294 1
  ((TraceConfig *)hConfig)->buf << endl << "}" << endl;
@


1.10
log
@Changed plugin API
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.9 2008/11/21 08:16:56 vfrolov Exp $
d22 3
d710 1
d735 2
@


1.9
log
@Added HUB_MSG_TYPE_LOOP_TEST
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.8 2008/11/13 07:52:20 vfrolov Exp $
d22 3
d149 2
a150 2
    void SetHub(HHUB _hHub) { hHub = _hHub; pName = pFilterName(hHub, (HFILTER)this); }
    const char *PortName(int nPort) const { return pPortName(hHub, nPort); }
d154 1
a155 1
    HHUB hHub;
a160 1
    hHub(NULL),
d315 1
a315 1
    HHUB hHub)
d318 1
a318 1
  _ASSERTE(hHub != NULL);
d320 1
a320 1
  ((Filter *)hFilter)->SetHub(hHub);
d431 1
d618 1
a618 1
  switch (pMsg->type & HUB_MSG_UNION_TYPE_MASK) {
d702 1
a702 1
    int nFromPort,
d716 1
a716 1
  tout << ((Filter *)hFilter)->PortName(nFromPort) << "-("
d726 2
a727 2
    int nFromPort,
    int nToPort,
d738 1
a738 1
  tout << ((Filter *)hFilter)->PortName(nToPort) << "<-("
d740 1
a740 1
       << ((Filter *)hFilter)->PortName(nFromPort) << ": ";
@


1.8
log
@Changed for staticaly linking
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.7 2008/11/12 08:46:39 vfrolov Exp $
d22 3
d116 1
a116 1
      cerr << "Can't open " << path.c_str() << endl;
d428 1
d628 3
@


1.7
log
@Fixed TYPE_LC and SET_LSR tracing
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.6 2008/10/16 16:02:34 vfrolov Exp $
d22 3
d51 2
a52 1

d772 2
@


1.6
log
@Added LBR_STATUS and LLC_STATUS
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.5 2008/10/16 06:46:13 vfrolov Exp $
d22 3
d581 12
a592 2
      tout << (unsigned)LC2VAL_BYTESIZE(val) << '-';
      PrintCode(tout, codeNameTableParity, LC2VAL_PARITY(val));
d594 5
a598 1
      PrintCode(tout, codeNameTableStopBits, LC2VAL_STOPBITS(val));
d636 1
@


1.5
log
@Added PIN_STATE_* for DCE
Added HUB_MSG_TYPE_SET_LSR
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.4 2008/10/02 14:01:43 vfrolov Exp $
d22 4
d416 2
d465 2
@


1.4
log
@Added help
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.3 2008/09/30 08:28:32 vfrolov Exp $
d22 3
d199 1
d201 2
a202 5
  << "      --create-filter=trace,com" << endl
  << "      --add-filters=0:com" << endl
  << endl
  << "      --create-filter=pin2con" << endl
  << "      --add-filters=0:pin2con" << endl
d204 2
a205 5
  << "      --create-filter=trace,p2c" << endl
  << "      --add-filters=0:p2c" << endl
  << endl
  << "      --create-filter=awakseq:--awak-seq=aaa" << endl
  << "      --add-filters=0:awakseq" << endl
d207 2
a208 2
  << "      --create-filter=trace,awk" << endl
  << "      --add-filters=0:awk" << endl
d212 1
d214 4
a217 1
  << "      --create-filter=trace,tcp" << endl
a219 5
  << "      --create-filter=telnet" << endl
  << "      --add-filters=1:telnet" << endl
  << "      --trace-file=tel.log" << endl
  << "      --create-filter=trace,tel" << endl
  << "      --add-filters=1:tel" << endl
d411 1
d469 4
@


1.3
log
@Added ability to control OUT1 and OUT2 pins
Added ability to get remote baud rate and line control settings
Added ability to set baud rate and line control
Added fallback to non escape mode
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.2 2008/08/29 15:17:07 vfrolov Exp $
d22 6
d185 5
a189 1
  << "  " << pProgPath << " ... --create-filter=" << GetPluginAbout()->pName << "[,<FID>][:<options>] ... --add-filters=<ports>:[...,]<FID>[,...] ..." << endl
d194 34
@


1.2
log
@Added printing command line and config
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.1 2008/08/29 13:13:04 vfrolov Exp $
d22 3
d298 1
a298 1
        tout << pTable->name; 
d368 19
d390 1
a390 1
static FIELD2NAME fieldNameTableModemStatus[] = {
d402 1
a402 1
static FIELD2NAME fieldNameTableLineStatus[] = {
d414 1
a414 1
static FIELD2NAME fieldNameTableGoOptions[] = {
d422 1
a422 1
static FIELD2NAME codeNameTableSetPinState[] = {
d431 6
d523 6
d546 1
a546 1
      tout << "&0x" << hex << *pMsg->u.pv.pVal << dec << " ";
d573 2
a574 2
      delimitNext = PrintFields(tout, codeNameTableSetPinState, SO_O2V_PIN_STATE(pMsg->u.val), delimitNext, "PIN_");
      PrintFields(tout, NULL, pMsg->u.val & ~SO_V2O_PIN_STATE(-1), delimitNext);
d579 1
a579 1
      tout << "&[";
d593 1
a593 1
      tout << "&[";
d600 4
a603 2
      tout << "[";
      PrintEscOptions(tout, pMsg->u.val & ~ESC_OPTS_V2O_ESCCHAR(-1));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: $
d21 4
a24 1
 * $Log: $
d40 2
d54 1
a54 1
    TraceConfig() : pTraceStream(&cout) {}
d58 2
d64 4
d79 4
a82 1
  ofstream *pStream = new ofstream(path.c_str());
d84 11
a94 3
  if (!pStream) {
    cerr << "No enough memory." << endl;
    exit(2);
d97 4
a100 4
  if (!pStream->is_open()) {
    cerr << "Can't open " << path.c_str() << endl;
    exit(2);
  }
d102 4
a105 1
  return pTraceStream = pStream;
d193 7
d209 2
d227 3
@

