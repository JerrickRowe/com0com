head	1.19;
access;
symbols
	v2_1_0_0:1.19
	v2_0_1_0:1.17
	RELEASED:1.19
	v2_0_0_0:1.16;
locks; strict;
comment	@// @;


1.19
date	2011.05.23.09.53.58;	author vfrolov;	state Exp;
branches;
next	1.18;

1.18
date	2011.05.19.16.33.34;	author vfrolov;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.18.15.00.36;	author vfrolov;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.02.15.21.42;	author vfrolov;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.22.09.40.46;	author vfrolov;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.18.16.50.52;	author vfrolov;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.25.16.40.40;	author vfrolov;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.24.12.37.00;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.13.07.51.34;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.16.06.49.58;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.02.08.20.17;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.26.14.28.48;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.25.08.08.22;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.22.16.57.11;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.22.12.45.34;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.20.14.30.19;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.14.09.49.45;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.13.14.31.41;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.11.07.26.48;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Added --data option
@
text
@/*
 * $Id: filter.cpp,v 1.18 2011/05/19 16:33:34 vfrolov Exp $
 *
 * Copyright (c) 2008-2011 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: filter.cpp,v $
 * Revision 1.18  2011/05/19 16:33:34  vfrolov
 * Fixed typo
 * Added 'on' input state
 *
 * Revision 1.17  2010/05/18 15:00:36  vfrolov
 * Added connection counter
 *
 * Revision 1.16  2009/02/02 15:21:42  vfrolov
 * Optimized filter's API
 *
 * Revision 1.15  2008/12/22 09:40:46  vfrolov
 * Optimized message switching
 *
 * Revision 1.14  2008/12/18 16:50:52  vfrolov
 * Extended the number of possible IN options
 *
 * Revision 1.13  2008/11/25 16:40:40  vfrolov
 * Added assert for port handle
 *
 * Revision 1.12  2008/11/24 12:37:00  vfrolov
 * Changed plugin API
 *
 * Revision 1.11  2008/11/13 07:51:34  vfrolov
 * Changed for staticaly linking
 *
 * Revision 1.10  2008/10/16 06:49:58  vfrolov
 * Added wiring to DCE's output pins
 *
 * Revision 1.9  2008/10/02 08:20:17  vfrolov
 * Added connect mapping
 *
 * Revision 1.8  2008/08/26 14:28:48  vfrolov
 * Removed option --break=break from default
 *
 * Revision 1.7  2008/08/25 08:08:22  vfrolov
 * Added init pin state
 *
 * Revision 1.6  2008/08/22 16:57:11  vfrolov
 * Added
 *   HUB_MSG_TYPE_GET_ESC_OPTS
 *   HUB_MSG_TYPE_FAIL_ESC_OPTS
 *   HUB_MSG_TYPE_BREAK_STATUS
 *
 * Revision 1.5  2008/08/22 12:45:34  vfrolov
 * Added masking to HUB_MSG_TYPE_MODEM_STATUS and HUB_MSG_TYPE_LINE_STATUS
 *
 * Revision 1.4  2008/08/20 14:30:19  vfrolov
 * Redesigned serial port options
 *
 * Revision 1.3  2008/08/14 09:49:45  vfrolov
 * Fixed output pins masking
 *
 * Revision 1.2  2008/08/13 14:31:41  vfrolov
 * Fixed Help
 *
 * Revision 1.1  2008/08/11 07:26:48  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"
#include "../plugins_api.h"
///////////////////////////////////////////////////////////////
namespace FilterPinMap {
///////////////////////////////////////////////////////////////
static ROUTINE_MSG_INSERT_VAL *pMsgInsertVal;
static ROUTINE_MSG_REPLACE_NONE *pMsgReplaceNone;
static ROUTINE_PORT_NAME_A *pPortName;
static ROUTINE_FILTER_NAME_A *pFilterName;
static ROUTINE_FILTERPORT *pFilterPort;
///////////////////////////////////////////////////////////////
const char *GetParam(const char *pArg, const char *pPattern)
{
  size_t lenPattern = strlen(pPattern);

  if (_strnicmp(pArg, pPattern, lenPattern) != 0)
    return NULL;

  return pArg + lenPattern;
}
///////////////////////////////////////////////////////////////
class Valid {
  public:
    Valid() : isValid(TRUE) {}
    void Invalidate() { isValid = FALSE; }
    BOOL IsValid() const { return isValid; }
  private:
    BOOL isValid;
};
///////////////////////////////////////////////////////////////
#define PST2OM(m)    ((DWORD)((WORD)(m)))
#define OM2PST(m)    ((WORD)(m))
#define OM_DATA      ((DWORD)1 << 16)

static struct {
  const char *pName;
  DWORD val;
} pinOut_names[] = {
  {"rts=",    PST2OM(PIN_STATE_RTS)},
  {"dtr=",    PST2OM(PIN_STATE_DTR)},
  {"out1=",   PST2OM(PIN_STATE_OUT1)},
  {"out2=",   PST2OM(PIN_STATE_OUT2)},
  {"cts=",    PST2OM(PIN_STATE_CTS)},
  {"dsr=",    PST2OM(PIN_STATE_DSR)},
  {"ring=",   PST2OM(PIN_STATE_RI)},
  {"dcd=",    PST2OM(PIN_STATE_DCD)},
  {"break=",  PST2OM(PIN_STATE_BREAK)},
  {"data=",   OM_DATA},
};
///////////////////////////////////////////////////////////////
#define LM_BREAK     ((WORD)1 << 8)
#define LM_CONNECT   ((WORD)1 << 9)
#define LM_ON        ((WORD)1 << 10)
#define MST2LM(m)    ((WORD)((BYTE)(m)))
#define LM2MST(lm)   ((BYTE)(lm))
#define LM_2_GO1(lm) (GO1_V2O_MODEM_STATUS(LM2MST(lm)) | ((lm & LM_BREAK) ? GO1_BREAK_STATUS : 0))

static struct {
  const char *pName;
  WORD lmVal;
} pinIn_names[] = {
  {"cts",     MST2LM(MODEM_STATUS_CTS)},
  {"dsr",     MST2LM(MODEM_STATUS_DSR)},
  {"dcd",     MST2LM(MODEM_STATUS_DCD)},
  {"ring",    MST2LM(MODEM_STATUS_RI)},
  {"break",   LM_BREAK},
  {"connect", LM_CONNECT},
  {"on",      LM_ON},
};
///////////////////////////////////////////////////////////////
class State {
  public:
    State(HMASTERPORT hMasterPort)
      : pName(pPortName(hMasterPort))
      , outVal(0)
      , lmInVal(LM_ON)
      , connectionCounter(0)
    {}

    const char *const pName;
    DWORD outVal;
    WORD lmInVal;
    int connectionCounter;
};
///////////////////////////////////////////////////////////////
class Filter : public Valid {
  public:
    Filter(const char *pName, int argc, const char *const argv[]);

    const char *FilterName() const { return pName; }

    struct PinOuts {
      PinOuts() : mask(0), val(0) {}

      DWORD mask;
      DWORD val;
    };

    PinOuts pinMap[sizeof(pinIn_names)/sizeof(pinIn_names[0])];
    DWORD outMask;
    WORD lmInMask;

  private:
    const char *pName;

    void Parse(const char *pArg);
};

Filter::Filter(const char *_pName, int argc, const char *const argv[])
  : pName(_pName),
    outMask(0),
    lmInMask(0)
{
  for (const char *const *pArgs = &argv[1] ; argc > 1 ; pArgs++, argc--) {
    const char *pArg = GetParam(*pArgs, "--");

    if (!pArg) {
      cerr << "Unknown option " << *pArgs << endl;
      Invalidate();
      continue;
    }

    Parse(pArg);
  }

  if (!lmInMask) {
    Parse("rts=cts");
    Parse("dtr=dsr");
  }
}

void Filter::Parse(const char *pArg)
{
  BOOL foundOut = FALSE;

  for (int iOut = 0 ; iOut < sizeof(pinOut_names)/sizeof(pinOut_names[0]) ; iOut++) {
    const char *pParam;

    if ((pParam = GetParam(pArg, pinOut_names[iOut].pName)) == NULL)
      continue;

    foundOut = TRUE;

    if ((outMask & pinOut_names[iOut].val) != 0) {
      cerr << "Duplicated option --" << pinOut_names[iOut].pName << endl;
      Invalidate();
    }

    outMask |= pinOut_names[iOut].val;

    BOOL negative;

    if (*pParam == '!') {
      negative = TRUE;
      pParam++;
    } else {
      negative = FALSE;
    }

    BOOL foundIn = FALSE;

    _ASSERTE(sizeof(pinIn_names)/sizeof(pinIn_names[0]) == sizeof(pinMap)/sizeof(pinMap[0]));

    for (int iIn = 0 ; iIn < sizeof(pinIn_names)/sizeof(pinIn_names[0]) ; iIn++) {
      if (_stricmp(pParam, pinIn_names[iIn].pName) == 0) {
        foundIn = TRUE;
        lmInMask |= pinIn_names[iIn].lmVal;

        pinMap[iIn].mask |= pinOut_names[iOut].val;

        if (negative)
          pinMap[iIn].val &= ~pinOut_names[iOut].val;
        else
          pinMap[iIn].val |= pinOut_names[iOut].val;

        break;
      }
    }

    if (!foundIn) {
      cerr << "Unknown pin " << pParam << endl;
      Invalidate();
    }

    break;
  }

  if (!foundOut) {
    cerr << "Unknown option " << pArg << endl;
    Invalidate();
  }
}
///////////////////////////////////////////////////////////////
static PLUGIN_TYPE CALLBACK GetPluginType()
{
  return PLUGIN_TYPE_FILTER;
}
///////////////////////////////////////////////////////////////
static const PLUGIN_ABOUT_A about = {
  sizeof(PLUGIN_ABOUT_A),
  "pinmap",
  "Copyright (c) 2008-2011 Vyacheslav Frolov",
  "GNU General Public License",
  "Pinouts mapping filter",
};

static const PLUGIN_ABOUT_A * CALLBACK GetPluginAbout()
{
  return &about;
}
///////////////////////////////////////////////////////////////
static void CALLBACK Help(const char *pProgPath)
{
  cerr
  << "Usage:" << endl
  << "  " << pProgPath << " ... --create-filter=" << GetPluginAbout()->pName << "[,<FID>][:<options>] ... --add-filters=<ports>:[...,]<FID>[,...] ..." << endl
  << endl
  << "Wire options:" << endl
  << "  --rts=[!]<s>          - wire input state of <s> to output pin RTS." << endl
  << "  --dtr=[!]<s>          - wire input state of <s> to output pin DTR." << endl
  << "  --out1=[!]<s>         - wire input state of <s> to output pin OUT1." << endl
  << "  --out2=[!]<s>         - wire input state of <s> to output pin OUT2." << endl
  << "  --cts=[!]<s>          - wire input state of <s> to output pin CTS." << endl
  << "  --dsr=[!]<s>          - wire input state of <s> to output pin DSR." << endl
  << "  --ring=[!]<s>         - wire input state of <s> to output pin RI." << endl
  << "  --dcd=[!]<s>          - wire input state of <s> to output pin DCD." << endl
  << "  --break=[!]<s>        - wire input state of <s> to output state of BREAK." << endl
  << "  --data=[!]<s>         - wire input state of <s> to state of DATA." << endl
  << endl
  << "  The possible values of <s> above can be on, cts, dsr, dcd, ring, break or" << endl
  << "  connect. The exclamation sign (!) can be used to invert the value. If no any" << endl
  << "  wire option specified, then the options --rts=cts --dtr=dsr are used by" << endl
  << "  default." << endl
  << endl
  << "OUT method input data stream description:" << endl
  << "  SET_PIN_STATE(<set>)  - pin settings controlled by this filter will be" << endl
  << "                          discarded from <set>." << endl
  << "  CONNECT(TRUE)         - increment connection counter. The incrementing of the" << endl
  << "                          connection counter from 0 will raise wire input state" << endl
  << "                          of connect" << endl
  << "  CONNECT(FALSE)        - decrement connection counter. The decrementing of the" << endl
  << "                          connection counter to 0 will clear wire input state" << endl
  << "                          of connect" << endl
  << "  BREAK_STATUS(<val>)   - current state of break." << endl
  << "  MODEM_STATUS(<val>)   - current state of modem." << endl
  << "  LINE_DATA(<data>)     - will be discarded from stream if the state of DATA is" << endl
  << "                          OFF." << endl
  << endl
  << "OUT method output data stream description:" << endl
  << "  SET_PIN_STATE(<set>)  - will be added on appropriate state changing." << endl
  << endl
  << "Examples:" << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      --create-filter=pinmap" << endl
  << "      --add-filters=0,1:pinmap" << endl
  << "      COM1" << endl
  << "      COM2" << endl
  << "      _END_" << endl
  << "    - transfer data and signals between COM1 and COM2." << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      --create-filter=pinmap:--rts=cts --dtr=on" << endl
  << "      --add-filters=0,1:pinmap" << endl
  << "      --octs=off" << endl
  << "      COM1" << endl
  << "      COM2" << endl
  << "      _END_" << endl
  << "    - allow end-to-end RTS/CTS handshaking between COM1 and COM2" << endl
  << "      and raise DTR on both ports." << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      --create-filter=pinmap" << endl
  << "      --add-filters=0:pinmap" << endl
  << "      --echo-route=0" << endl
  << "      COM2" << endl
  << "      _END_" << endl
  << "    - receive data and signals from COM2 and send it back to COM2." << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      --create-filter=pinmap:--data=!cts" << endl
  << "      --add-filters=0:pinmap" << endl
  << "      --echo-route=0" << endl
  << "      --octs=off" << endl
  << "      COM2" << endl
  << "      _END_" << endl
  << "    - receive data from COM2 and if cts is OFF then send data back to COM2." << endl
  << "  " << pProgPath << " --load=,,_END_" << endl
  << "      --route=all:0" << endl
  << "      --create-filter=pinmap:--rts=connect --dtr=connect" << endl
  << "      --add-filters=0:pinmap" << endl
  << "      --create-filter=pin2con:--connect=dsr" << endl
  << "      --add-filters=1,2:pin2con" << endl
  << "      --octs=off" << endl
  << "      COM1" << endl
  << "      \\\\.\\CNCB0" << endl
  << "      \\\\.\\CNCB1" << endl
  << "      _END_" << endl
  << "    - transfer data from CNCB0 and CNCB1 to COM1." << endl
  << "      If DSR is in raised state on CNCB0 or CNCB1" << endl
  << "      then RTS and DTR are in raised state on COM1" << endl
  << "      else RTS and DTR are in cleared state on COM1." << endl
  ;
}
///////////////////////////////////////////////////////////////
static HFILTER CALLBACK Create(
    HMASTERFILTER hMasterFilter,
    HCONFIG /*hConfig*/,
    int argc,
    const char *const argv[])
{
  _ASSERTE(hMasterFilter != NULL);

  Filter *pFilter = new Filter(pFilterName(hMasterFilter), argc, argv);

  if (!pFilter) {
    cerr << "No enough memory." << endl;
    exit(2);
  }

  if (!pFilter->IsValid()) {
    delete pFilter;
    return NULL;
  }

  return (HFILTER)pFilter;
}
///////////////////////////////////////////////////////////////
static void CALLBACK Delete(
    HFILTER hFilter)
{
  _ASSERTE(hFilter != NULL);

  delete (Filter *)hFilter;
}
///////////////////////////////////////////////////////////////
static HFILTERINSTANCE CALLBACK CreateInstance(
    HMASTERFILTERINSTANCE hMasterFilterInstance)
{
  _ASSERTE(hMasterFilterInstance != NULL);

  HMASTERPORT hMasterPort = pFilterPort(hMasterFilterInstance);

  _ASSERTE(hMasterPort != NULL);

  return (HFILTERINSTANCE)new State(hMasterPort);
}
///////////////////////////////////////////////////////////////
static void CALLBACK DeleteInstance(
    HFILTERINSTANCE hFilterInstance)
{
  _ASSERTE(hFilterInstance != NULL);

  delete (State *)hFilterInstance;
}
///////////////////////////////////////////////////////////////
static void InsertPinState(
    const Filter &filter,
    WORD lmInMask,
    WORD lmInVal,
    State &state,
    HUB_MSG **ppOutMsg)
{
  if (!lmInMask)
    return;

  //cout << "InsertPinState lmInMask=0x" << hex << lmInMask << " lmInVal=0x" << lmInVal << dec << endl;

  DWORD outMask = 0;
  DWORD outVal = 0;

  for (int iIn = 0 ; iIn < sizeof(pinIn_names)/sizeof(pinIn_names[0]) ; iIn++) {
    if ((lmInMask & pinIn_names[iIn].lmVal) == 0)
      continue;

    outMask |= filter.pinMap[iIn].mask;

    if ((lmInVal & pinIn_names[iIn].lmVal) != 0)
      outVal |= (filter.pinMap[iIn].val & filter.pinMap[iIn].mask);
    else
      outVal |= (~filter.pinMap[iIn].val & filter.pinMap[iIn].mask);
  }

  state.outVal = (outVal & outMask) | (state.outVal & ~outMask);

  if (OM2PST(outMask)) {
    DWORD dVal = (VAL2MASK(OM2PST(outMask)) | OM2PST(outVal));
    //cout << "SET_PIN_STATE 0x" << hex << dVal << dec << endl;
    *ppOutMsg = pMsgInsertVal(*ppOutMsg, HUB_MSG_TYPE_SET_PIN_STATE, dVal);
  }
}

static BOOL CALLBACK OutMethod(
    HFILTER hFilter,
    HFILTERINSTANCE hFilterInstance,
    HMASTERPORT hFromPort,
    HUB_MSG *pOutMsg)
{
  _ASSERTE(hFilter != NULL);
  _ASSERTE(hFilterInstance != NULL);
  _ASSERTE(hFromPort != NULL);
  _ASSERTE(pOutMsg != NULL);

  switch (HUB_MSG_T2N(pOutMsg->type)) {
    case HUB_MSG_T2N(HUB_MSG_TYPE_SET_OUT_OPTS): {
      // or'e with the required mask to set pin state
      pOutMsg->u.val |= SO_V2O_PIN_STATE(OM2PST(((Filter *)hFilter)->outMask));

      // init pin state
      InsertPinState(*(Filter *)hFilter, ((Filter *)hFilter)->lmInMask, ((State *)hFilterInstance)->lmInVal, *(State *)hFilterInstance, &pOutMsg);

      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_GET_IN_OPTS): {
      _ASSERTE(pOutMsg->u.pv.pVal != NULL);

      if (GO_O2I(pOutMsg->u.pv.val) != 1)
        break;

      // or'e with the required mask to get break status and modem status
      *pOutMsg->u.pv.pVal |= (LM_2_GO1(((Filter *)hFilter)->lmInMask) & pOutMsg->u.pv.val);
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_FAIL_IN_OPTS): {
      if (GO_O2I(pOutMsg->u.pv.val) != 1)
        break;

      DWORD fail_options = (pOutMsg->u.val & LM_2_GO1(((Filter *)hFilter)->lmInMask));

      if (fail_options) {
        cerr << ((State *)hFilterInstance)->pName
             << " WARNING: Requested by filter " << ((Filter *)hFilter)->FilterName()
             << " for port " << pPortName(hFromPort)
             << " option(s) GO1_0x" << hex << fail_options << dec
             << " not accepted" << endl;
      }
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_SET_PIN_STATE):
      // discard any pin settings controlled by this filter
      pOutMsg->u.val &= ~(VAL2MASK(OM2PST(((Filter *)hFilter)->outMask)));
      break;
    case HUB_MSG_T2N(HUB_MSG_TYPE_MODEM_STATUS): {
      WORD lmInMask = MST2LM(MASK2VAL(pOutMsg->u.val)) & ((Filter *)hFilter)->lmInMask;
      WORD lmInVal = ((MST2LM(pOutMsg->u.val) & lmInMask) | (((State *)hFilterInstance)->lmInVal & ~lmInMask));

      InsertPinState(*(Filter *)hFilter, ((State *)hFilterInstance)->lmInVal ^ lmInVal, lmInVal, *(State *)hFilterInstance, &pOutMsg);

      ((State *)hFilterInstance)->lmInVal = lmInVal;
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_BREAK_STATUS): {
      if (((Filter *)hFilter)->lmInMask & LM_BREAK) {
        WORD lmInVal = ((pOutMsg->u.val ? LM_BREAK : 0) | (((State *)hFilterInstance)->lmInVal & ~LM_BREAK));

        InsertPinState(*(Filter *)hFilter, ((State *)hFilterInstance)->lmInVal ^ lmInVal, lmInVal, *(State *)hFilterInstance, &pOutMsg);

        ((State *)hFilterInstance)->lmInVal = lmInVal;
      }
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_CONNECT): {
      if (((Filter *)hFilter)->lmInMask & LM_CONNECT) {
        if (pOutMsg->u.val) {
          ((State *)hFilterInstance)->connectionCounter++;

          _ASSERTE(((State *)hFilterInstance)->connectionCounter > 0);

        } else {
          _ASSERTE(((State *)hFilterInstance)->connectionCounter > 0);

          ((State *)hFilterInstance)->connectionCounter--;
        }

        WORD lmInVal = ((((State *)hFilterInstance)->connectionCounter > 0 ? LM_CONNECT : 0) | (((State *)hFilterInstance)->lmInVal & ~LM_CONNECT));

        InsertPinState(*(Filter *)hFilter, ((State *)hFilterInstance)->lmInVal ^ lmInVal, lmInVal, *(State *)hFilterInstance, &pOutMsg);

        ((State *)hFilterInstance)->lmInVal = lmInVal;
      }
      break;
    }
    case HUB_MSG_T2N(HUB_MSG_TYPE_LINE_DATA): {
      if ((((Filter *)hFilter)->outMask & OM_DATA) != 0 && (((State *)hFilterInstance)->outVal & OM_DATA) == 0) {
        if (!pMsgReplaceNone(pOutMsg, HUB_MSG_TYPE_EMPTY))
          return FALSE;
      }

      break;
    }
  }

  return pOutMsg != NULL;
}
///////////////////////////////////////////////////////////////
static const FILTER_ROUTINES_A routines = {
  sizeof(FILTER_ROUTINES_A),
  GetPluginType,
  GetPluginAbout,
  Help,
  NULL,           // ConfigStart
  NULL,           // Config
  NULL,           // ConfigStop
  Create,
  Delete,
  CreateInstance,
  DeleteInstance,
  NULL,           // InMethod
  OutMethod,
};

static const PLUGIN_ROUTINES_A *const plugins[] = {
  (const PLUGIN_ROUTINES_A *)&routines,
  NULL
};
///////////////////////////////////////////////////////////////
PLUGIN_INIT_A InitA;
const PLUGIN_ROUTINES_A *const * CALLBACK InitA(
    const HUB_ROUTINES_A * pHubRoutines)
{
  if (!ROUTINE_IS_VALID(pHubRoutines, pMsgInsertVal) ||
      !ROUTINE_IS_VALID(pHubRoutines, pMsgReplaceNone) ||
      !ROUTINE_IS_VALID(pHubRoutines, pPortName) ||
      !ROUTINE_IS_VALID(pHubRoutines, pFilterName) ||
      !ROUTINE_IS_VALID(pHubRoutines, pFilterPort))
  {
    return NULL;
  }

  pMsgInsertVal = pHubRoutines->pMsgInsertVal;
  pMsgReplaceNone = pHubRoutines->pMsgReplaceNone;
  pPortName = pHubRoutines->pPortName;
  pFilterName = pHubRoutines->pFilterName;
  pFilterPort = pHubRoutines->pFilterPort;

  return plugins;
}
///////////////////////////////////////////////////////////////
} // end namespace
///////////////////////////////////////////////////////////////
@


1.18
log
@Fixed typo
Added 'on' input state
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.17 2010/05/18 15:00:36 vfrolov Exp $
d22 4
d88 1
d112 4
d118 1
a118 1
  WORD val;
d120 10
a129 9
  {"rts=",    PIN_STATE_RTS},
  {"dtr=",    PIN_STATE_DTR},
  {"out1=",   PIN_STATE_OUT1},
  {"out2=",   PIN_STATE_OUT2},
  {"cts=",    PIN_STATE_CTS},
  {"dsr=",    PIN_STATE_DSR},
  {"ring=",   PIN_STATE_RI},
  {"dcd=",    PIN_STATE_DCD},
  {"break=",  PIN_STATE_BREAK},
d156 1
d162 1
d176 2
a177 2
      WORD mask;
      WORD val;
d181 1
a181 1
    WORD outMask;
d309 1
d327 2
d358 8
d435 1
a435 1
    Filter &filter,
d438 1
d446 2
a447 2
  WORD mask = 0;
  WORD val = 0;
d453 1
a453 1
    mask |= filter.pinMap[iIn].mask;
d456 1
a456 1
      val |= (filter.pinMap[iIn].val & filter.pinMap[iIn].mask);
d458 1
a458 1
      val |= (~filter.pinMap[iIn].val & filter.pinMap[iIn].mask);
d461 4
a464 2
  if (mask) {
    DWORD dVal = (VAL2MASK(mask) | val);
d484 1
a484 1
      pOutMsg->u.val |= SO_V2O_PIN_STATE(((Filter *)hFilter)->outMask);
d487 1
a487 1
      InsertPinState(*(Filter *)hFilter, ((Filter *)hFilter)->lmInMask, ((State *)hFilterInstance)->lmInVal, &pOutMsg);
d518 1
a518 1
      pOutMsg->u.val &= ~(VAL2MASK(((Filter *)hFilter)->outMask));
d524 1
a524 1
      InsertPinState(*(Filter *)hFilter, ((State *)hFilterInstance)->lmInVal ^ lmInVal, lmInVal, &pOutMsg);
d533 1
a533 1
        InsertPinState(*(Filter *)hFilter, ((State *)hFilterInstance)->lmInVal ^ lmInVal, lmInVal, &pOutMsg);
d554 1
a554 1
        InsertPinState(*(Filter *)hFilter, ((State *)hFilterInstance)->lmInVal ^ lmInVal, lmInVal, &pOutMsg);
d560 8
d599 1
d608 1
@


1.17
log
@Added connection counter
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.16 2009/02/02 15:21:42 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008-2010 Vyacheslav Frolov
d22 3
d124 1
d139 1
d146 1
a146 1
      , lmInVal(0)
d271 1
a271 1
  "Copyright (c) 2008-2010 Vyacheslav Frolov",
d298 1
a298 1
  << "  The possible values of <s> above can be cts, dsr, dcd, ring, break or" << endl
d327 1
a327 1
  << "      --create-filter=pinmap:--rts=cts" << endl
d333 2
a334 1
  << "    - allow end-to-end RTS/CTS handshaking between COM1 and COM2." << endl
d447 1
a447 1
    HMASTERPORT hToPort,
d452 1
a452 1
  _ASSERTE(hToPort != NULL);
d484 1
a484 1
             << " for port " << pPortName(hToPort)
@


1.16
log
@Optimized filter's API
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.15 2008/12/22 09:40:46 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008-2009 Vyacheslav Frolov
d22 3
d139 5
a143 1
    State(HMASTERPORT hMasterPort) : pName(pPortName(hMasterPort)), lmInVal(0) {}
d147 1
d266 1
a266 1
  "Copyright (c) 2008 Vyacheslav Frolov",
d301 6
a306 1
  << "  CONNECT(<val>)        - current state of connect." << endl
d322 1
a322 1
  << "      --create-filter=pinmap:\"--rts=cts\"" << endl
d336 15
d509 12
a520 1
        WORD lmInVal = ((pOutMsg->u.val ? LM_CONNECT : 0) | (((State *)hFilterInstance)->lmInVal & ~LM_CONNECT));
@


1.15
log
@Optimized message switching
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.14 2008/12/18 16:50:52 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008 Vyacheslav Frolov
d22 3
d77 4
a80 3
static ROUTINE_MSG_INSERT_VAL *pMsgInsertVal = NULL;
static ROUTINE_PORT_NAME_A *pPortName = NULL;
static ROUTINE_FILTER_NAME_A *pFilterName = NULL;
d136 1
a136 1
    State() : lmInVal(0) {}
d138 1
d144 1
a144 2
    Filter(int argc, const char *const argv[]);
    State *GetState(HMASTERPORT hPort);
a145 1
    void SetFilterName(const char *_pName) { pName = _pName; }
a161 5
    typedef map<HMASTERPORT, State*> PortsMap;
    typedef pair<HMASTERPORT, State*> PortPair;

    PortsMap portsMap;

d165 4
a168 4
Filter::Filter(int argc, const char *const argv[])
  : outMask(0),
    lmInMask(0),
    pName(NULL)
a248 19

State *Filter::GetState(HMASTERPORT hPort)
{
  PortsMap::iterator iPair = portsMap.find(hPort);

  if (iPair == portsMap.end()) {
      portsMap.insert(PortPair(hPort, NULL));

      iPair = portsMap.find(hPort);

      if (iPair == portsMap.end())
        return NULL;
  }

  if (!iPair->second)
    iPair->second = new State();

  return iPair->second;
}
d327 1
d332 3
a334 1
  Filter *pFilter = new Filter(argc, argv);
d336 4
a339 2
  if (!pFilter)
    return NULL;
d349 2
a350 3
static BOOL CALLBACK Init(
    HFILTER hFilter,
    HMASTERFILTER hMasterFilter)
a352 1
  _ASSERTE(hMasterFilter != NULL);
d354 19
a372 1
  ((Filter *)hFilter)->SetFilterName(pFilterName(hMasterFilter));
d374 1
a374 1
  return TRUE;
d412 1
a412 1
    HMASTERPORT hFromPort,
d417 1
a417 1
  _ASSERTE(hFromPort != NULL);
a425 5
      State *pState = ((Filter *)hFilter)->GetState(hToPort);

      if (!pState)
        return FALSE;

d427 1
a427 1
      InsertPinState(*(Filter *)hFilter, ((Filter *)hFilter)->lmInMask, pState->lmInVal, &pOutMsg);
d448 1
a448 1
        cerr << pPortName(hFromPort)
a460 5
      State *pState = ((Filter *)hFilter)->GetState(hToPort);

      if (!pState)
        return FALSE;

d462 1
a462 1
      WORD lmInVal = ((MST2LM(pOutMsg->u.val) & lmInMask) | (pState->lmInVal & ~lmInMask));
d464 1
a464 1
      InsertPinState(*(Filter *)hFilter, pState->lmInVal ^ lmInVal, lmInVal, &pOutMsg);
d466 1
a466 1
      pState->lmInVal = lmInVal;
d471 1
a471 1
        State *pState = ((Filter *)hFilter)->GetState(hToPort);
d473 1
a473 2
        if (!pState)
          return FALSE;
d475 1
a475 5
        WORD lmInVal = ((pOutMsg->u.val ? LM_BREAK : 0) | (pState->lmInVal & ~LM_BREAK));

        InsertPinState(*(Filter *)hFilter, pState->lmInVal ^ lmInVal, lmInVal, &pOutMsg);

        pState->lmInVal = lmInVal;
d481 1
a481 6
        State *pState = ((Filter *)hFilter)->GetState(hToPort);

        if (!pState)
          return FALSE;

        WORD lmInVal = ((pOutMsg->u.val ? LM_CONNECT : 0) | (pState->lmInVal & ~LM_CONNECT));
d483 1
a483 1
        InsertPinState(*(Filter *)hFilter, pState->lmInVal ^ lmInVal, lmInVal, &pOutMsg);
d485 1
a485 1
        pState->lmInVal = lmInVal;
d503 3
a505 1
  Init,
d521 2
a522 1
      !ROUTINE_IS_VALID(pHubRoutines, pFilterName))
d530 1
@


1.14
log
@Extended the number of possible IN options
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.13 2008/11/25 16:40:40 vfrolov Exp $
d22 3
d421 2
a422 2
  switch (pOutMsg->type) {
    case HUB_MSG_TYPE_SET_OUT_OPTS: {
d436 1
a436 1
    case HUB_MSG_TYPE_GET_IN_OPTS: {
d446 1
a446 1
    case HUB_MSG_TYPE_FAIL_IN_OPTS: {
d461 1
a461 1
    case HUB_MSG_TYPE_SET_PIN_STATE:
d465 1
a465 1
    case HUB_MSG_TYPE_MODEM_STATUS: {
d479 1
a479 1
    case HUB_MSG_TYPE_BREAK_STATUS: {
d494 1
a494 1
    case HUB_MSG_TYPE_CONNECT: {
@


1.13
log
@Added assert for port handle
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.12 2008/11/24 12:37:00 vfrolov Exp $
d22 3
d109 5
a113 5
#define LM_BREAK    ((WORD)1 << 8)
#define LM_CONNECT  ((WORD)1 << 9)
#define MST2LM(m)   ((WORD)((BYTE)(m)))
#define LM2MST(lm)  ((BYTE)(lm))
#define LM2GO(lm)   (GO_V2O_MODEM_STATUS(LM2MST(lm)) | ((lm & LM_BREAK) ? GO_BREAK_STATUS : 0))
d436 3
d440 1
a440 1
      *pOutMsg->u.pv.pVal |= (LM2GO(((Filter *)hFilter)->lmInMask) & pOutMsg->u.pv.val);
d444 4
a447 1
      DWORD fail_options = (pOutMsg->u.val & LM2GO(((Filter *)hFilter)->lmInMask));
d453 1
a453 1
             << " option(s) 0x" << hex << fail_options << dec
@


1.12
log
@Changed plugin API
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.11 2008/11/13 07:51:34 vfrolov Exp $
d22 3
d411 2
@


1.11
log
@Changed for staticaly linking
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.10 2008/10/16 06:49:58 vfrolov Exp $
d22 3
d131 4
a134 4
    void SetHub(HHUB _hHub) { hHub = _hHub; }
    State *GetState(int nPort);
    const char *PortName(int nPort) const { return pPortName(hHub, nPort); }
    const char *FilterName() const { return pFilterName(hHub, (HFILTER)this); }
d148 1
a148 1
    HHUB hHub;
d150 2
a151 2
    typedef map<int, State*> PortsMap;
    typedef pair<int, State*> PortPair;
d161 1
a161 1
    hHub(NULL)
d243 1
a243 1
State *Filter::GetState(int nPort)
d245 1
a245 1
  PortsMap::iterator iPair = portsMap.find(nPort);
d248 1
a248 1
      portsMap.insert(PortPair(nPort, NULL));
d250 1
a250 1
      iPair = portsMap.find(nPort);
d358 1
a358 1
    HHUB hHub)
d361 1
a361 1
  _ASSERTE(hHub != NULL);
d363 1
a363 1
  ((Filter *)hFilter)->SetHub(hHub);
d403 2
a404 2
    int nFromPort,
    int nToPort,
d415 1
a415 1
      State *pState = ((Filter *)hFilter)->GetState(nToPort);
d436 1
a436 1
        cerr << ((Filter *)hFilter)->PortName(nFromPort)
d438 1
a438 1
             << " for port " << ((Filter *)hFilter)->PortName(nToPort)
d449 1
a449 1
      State *pState = ((Filter *)hFilter)->GetState(nToPort);
d464 1
a464 1
        State *pState = ((Filter *)hFilter)->GetState(nToPort);
d479 1
a479 1
        State *pState = ((Filter *)hFilter)->GetState(nToPort);
@


1.10
log
@Added wiring to DCE's output pins
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.9 2008/10/02 08:20:17 vfrolov Exp $
d22 3
d59 2
a60 1

d531 2
@


1.9
log
@Added connect mapping
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.8 2008/08/26 14:28:48 vfrolov Exp $
d22 3
d89 4
d284 4
d431 1
@


1.8
log
@Removed option --break=break from default
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.7 2008/08/25 08:08:22 vfrolov Exp $
d22 3
d89 5
a93 6
#define MST2LSRMST(m) ((WORD)((BYTE)(m)))
#define LSR2LSRMST(l) ((WORD)(((WORD)(BYTE)(l)) << 8))
#define LSRMST2MST(lm) ((BYTE)(lm))
#define LSRMST2LSR(lm) ((BYTE)((lm) >> 8))
#define LSRMST2GO(lm) (GO_V2O_MODEM_STATUS(LSRMST2MST(lm)) | \
        ((lm & LSR2LSRMST(LINE_STATUS_BI)) ? GO_BREAK_STATUS : 0))
d99 6
a104 5
  {"cts",   MST2LSRMST(MODEM_STATUS_CTS)},
  {"dsr",   MST2LSRMST(MODEM_STATUS_DSR)},
  {"dcd",   MST2LSRMST(MODEM_STATUS_DCD)},
  {"ring",  MST2LSRMST(MODEM_STATUS_RI)},
  {"break", LSR2LSRMST(LINE_STATUS_BI)},
d279 4
a282 3
  << "  The possible values of <s> above can be cts, dsr, dcd, ring or break. The" << endl
  << "  exclamation sign (!) can be used to invert the value. If no any wire option" << endl
  << "  specified, then the options --rts=cts --dtr=dsr are used by default." << endl
a284 5
  << "  SET_OUT_OPTS(<opts>)  - the value <opts> will be or'ed with the required mask" << endl
  << "                          to to set pin state." << endl
  << "  GET_IN_OPTS(<pOpts>)  - the value pointed by <pOpts> will be or'ed with" << endl
  << "                          the required mask to get line status and modem" << endl
  << "                          status." << endl
d287 2
a288 1
  << "  LINE_STATUS(<val>)    - current state of line." << endl
d295 6
a300 1
  << "  " << pProgPath << " --create-filter=" << GetPluginAbout()->pName << " --add-filters=0,1:" << GetPluginAbout()->pName << " COM1 COM2" << endl
d302 7
a308 1
  << "  " << pProgPath << " --create-filter=" << GetPluginAbout()->pName << ":\"--rts=cts\" --add-filters=0,1:" << GetPluginAbout()->pName << " --octs=off COM1 COM2" << endl
d310 6
a315 1
  << "  " << pProgPath << " --create-filter=" << GetPluginAbout()->pName << " --add-filters=0:" << GetPluginAbout()->pName << " --echo-route=0 COM2" << endl
d410 2
a411 2
      // or'e with the required mask to get line status and modem status
      *pOutMsg->u.pv.pVal |= (LSRMST2GO(((Filter *)hFilter)->lmInMask) & pOutMsg->u.pv.val);
d415 1
a415 1
      DWORD fail_options = (pOutMsg->u.val & LSRMST2GO(((Filter *)hFilter)->lmInMask));
a428 1
    case HUB_MSG_TYPE_BREAK_STATUS:
d435 14
a448 2
      WORD lmInVal;
      WORD lmInMask;
d450 5
a454 6
      if (pOutMsg->type == HUB_MSG_TYPE_MODEM_STATUS) {
        lmInVal = MST2LSRMST(pOutMsg->u.val);
        lmInMask = MST2LSRMST(MASK2VAL(pOutMsg->u.val));
      } else {
        lmInVal = (pOutMsg->u.val ? LSR2LSRMST(LINE_STATUS_BI) : 0);
        lmInMask = LSR2LSRMST(LINE_STATUS_BI);
d456 5
d462 2
a463 2
      lmInMask &= ((Filter *)hFilter)->lmInMask;
      lmInVal = ((lmInVal & lmInMask) | (pState->lmInVal & ~lmInMask));
d465 3
a467 1
      InsertPinState(*(Filter *)hFilter, pState->lmInVal ^ lmInVal, lmInVal, &pOutMsg);
d469 2
a470 1
      pState->lmInVal = lmInVal;
@


1.7
log
@Added init pin state
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.6 2008/08/22 16:57:11 vfrolov Exp $
d22 3
a85 2
#define LSR_BREAK_STATUS 0x01

d90 2
a91 1
#define LSRMST2GO(lm) (GO_V2O_MODEM_STATUS(LSRMST2MST(lm)) | ((LSRMST2LSR(lm) & LSR_BREAK_STATUS) ? GO_BREAK_STATUS : 0))
d101 1
a101 1
  {"break", LSR2LSRMST(LSR_BREAK_STATUS)},
a160 1
    Parse("break=break");
d274 1
a274 1
  << "  --break=[!]<s>        - wire input state of <s> to output pin BREAK." << endl
d278 1
a278 2
  << "  specified, then the options --rts=cts --dtr=dsr --break=break are used by" << endl
  << "  default." << endl
d427 2
a428 2
        lmInVal = (pOutMsg->u.val ? LSR2LSRMST(LSR_BREAK_STATUS) : 0);
        lmInMask = LSR2LSRMST(LSR_BREAK_STATUS);
d431 1
a432 1
      lmInVal &= ((Filter *)hFilter)->lmInMask;
@


1.6
log
@Added
  HUB_MSG_TYPE_GET_ESC_OPTS
  HUB_MSG_TYPE_FAIL_ESC_OPTS
  HUB_MSG_TYPE_BREAK_STATUS
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.5 2008/08/22 12:45:34 vfrolov Exp $
d22 6
d380 9
@


1.5
log
@Added masking to HUB_MSG_TYPE_MODEM_STATUS and HUB_MSG_TYPE_LINE_STATUS
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.4 2008/08/20 14:30:19 vfrolov Exp $
d22 3
d77 2
d83 1
a83 1
#define LSRMST2GO(lm) (GO_V2O_MODEM_STATUS(LSRMST2MST(lm)) | GO_V2O_LINE_STATUS(LSRMST2LSR(lm)))
d93 1
a93 1
  {"break", LSR2LSRMST(LINE_STATUS_BI)},
d398 1
a398 1
    case HUB_MSG_TYPE_LINE_STATUS:
d412 2
a413 2
        lmInVal = LSR2LSRMST(pOutMsg->u.val);
        lmInMask = LSR2LSRMST(MASK2VAL(pOutMsg->u.val));
@


1.4
log
@Redesigned serial port options
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.3 2008/08/14 09:49:45 vfrolov Exp $
d22 3
d350 1
a350 1
    DWORD dVal = (SPS_PIN2MASK(mask) | val);
d391 1
a391 1
      pOutMsg->u.val &= ~(SPS_PIN2MASK(((Filter *)hFilter)->outMask));
d401 1
d403 7
a409 4
      if (pOutMsg->type == HUB_MSG_TYPE_MODEM_STATUS)
        lmInVal = (MST2LSRMST(pOutMsg->u.val) | (pState->lmInVal & LSR2LSRMST(-1)));
      else
        lmInVal = (LSR2LSRMST(pOutMsg->u.val) | (pState->lmInVal & MST2LSRMST(-1)));
d411 1
d415 1
@


1.3
log
@Fixed output pins masking
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.2 2008/08/13 14:31:41 vfrolov Exp $
d22 3
d38 2
d62 1
a62 1
  DWORD val;
d64 5
a68 5
  {"rts=",    SO_V2O_PIN_STATE(PIN_STATE_RTS)},
  {"dtr=",    SO_V2O_PIN_STATE(PIN_STATE_DTR)},
  {"out1=",   SO_V2O_PIN_STATE(PIN_STATE_OUT1)},
  {"out2=",   SO_V2O_PIN_STATE(PIN_STATE_OUT2)},
  {"break=",  SO_V2O_PIN_STATE(PIN_STATE_BREAK)},
d71 6
d79 1
a79 1
  DWORD val;
d81 5
a85 5
  {"cts",   GO_V2O_MODEM_STATUS(MODEM_STATUS_CTS)},
  {"dsr",   GO_V2O_MODEM_STATUS(MODEM_STATUS_DSR)},
  {"dcd",   GO_V2O_MODEM_STATUS(MODEM_STATUS_DCD)},
  {"ring",  GO_V2O_MODEM_STATUS(MODEM_STATUS_RI)},
  {"break", GO_V2O_LINE_STATUS(LINE_STATUS_BI)},
d90 1
a90 1
    State() : inVal(0) {}
d92 1
a92 1
    WORD inVal;
d98 1
d100 2
d112 1
a112 1
    WORD inMask;
d115 2
d127 2
a128 1
    inMask(0)
d142 1
a142 1
  if (!inMask) {
d184 1
a184 1
        inMask |= pinIn_names[iIn].val;
d267 1
a267 1
  << "  SET_OPTIONS(<opts>)   - the value <opts> will be or'ed with the required mask" << endl
d269 1
a269 1
  << "  GET_OPTIONS(<pOpts>)  - the value pointed by <pOpts> will be or'ed with" << endl
d308 12
d322 2
a323 2
    WORD inMask,
    WORD inVal,
d326 1
a326 1
  if (!inMask)
d329 1
a329 1
  //cout << "InsertPinState inMask=0x" << hex << inMask << " inVal=0x" << inVal << dec << endl;
d335 1
a335 1
    if ((inMask & pinIn_names[iIn].val) == 0)
d340 1
a340 1
    if ((inVal & pinIn_names[iIn].val) != 0)
d355 1
a355 1
    int /*nFromPort*/,
d363 1
a363 1
    case HUB_MSG_TYPE_SET_OPTIONS: {
d365 1
a365 1
      pOutMsg->u.val |= ((Filter *)hFilter)->outMask;
d368 1
a368 1
    case HUB_MSG_TYPE_GET_OPTIONS: {
d372 12
a383 2
      WORD mask = (WORD)(((Filter *)hFilter)->inMask & pOutMsg->u.pv.val);
      *pOutMsg->u.pv.pVal |= mask;
d397 1
a397 1
      WORD inVal;
d400 1
a400 1
        inVal = ((WORD)pOutMsg->u.val & 0x00FF) | (pState->inVal & 0xFF00);
d402 1
a402 1
        inVal = ((WORD)pOutMsg->u.val << 8) | (pState->inVal & 0x00FF);
d404 1
a404 1
      inVal &= ((Filter *)hFilter)->inMask;
d406 2
a407 2
      InsertPinState(*(Filter *)hFilter, pState->inVal ^ inVal, inVal, &pOutMsg);
      pState->inVal = inVal;
d424 1
a424 1
  NULL,           // Init
d438 4
a441 1
  if (!ROUTINE_IS_VALID(pHubRoutines, pMsgInsertVal)) {
d446 2
@


1.2
log
@Fixed Help
@
text
@d2 1
a2 1
 * $Id: filter.cpp,v 1.1 2008/08/11 07:26:48 vfrolov Exp $
d22 3
d309 1
a309 1
    mask |= (DWORD)filter.pinMap[iIn].mask;
d312 1
a312 1
      val |= (filter.pinMap[iIn].val & mask);
d314 1
a314 1
      val |= (~filter.pinMap[iIn].val & mask);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: $
d21 4
a24 1
 * $Log: $
d247 3
a249 2
  << "  HUB_MSG_TYPE_GET_OPTIONS(<pOptions>)" << endl
  << "                        - the value pointed by <pOptions> will be or'ed with" << endl
d254 2
a255 2
  << "  LINE_STATUS(<val>)    - current state of line" << endl
  << "  MODEM_STATUS(<val>)   - current state of modem" << endl
d263 3
a265 1
  << "  " << pProgPath << " --echo-route=0 COM2" << endl
@

