head	1.9;
access;
symbols
	v2_1_0_0:1.9
	v2_0_1_0:1.8
	RELEASED:1.9
	v2_0_0_0:1.7;
locks; strict;
comment	@// @;


1.9
date	2011.07.27.17.08.33;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.14.16.31.50;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.06.07.56.28;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.27.13.44.52;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.13.07.35.10;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.16.06.57.29;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.28.10.24.35;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.07.12.28.03;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.26.08.44.13;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Implemented serial port share mode
@
text
@/*
 * $Id: comparams.cpp,v 1.8 2010/09/14 16:31:50 vfrolov Exp $
 *
 * Copyright (c) 2006-2011 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: comparams.cpp,v $
 * Revision 1.8  2010/09/14 16:31:50  vfrolov
 * Implemented --write-limit=0 to disable writing to the port
 *
 * Revision 1.7  2009/03/06 07:56:28  vfrolov
 * Fixed assertion with non ascii chars
 *
 * Revision 1.6  2008/11/27 13:44:52  vfrolov
 * Added --write-limit option
 *
 * Revision 1.5  2008/11/13 07:35:10  vfrolov
 * Changed for staticaly linking
 *
 * Revision 1.4  2008/10/16 06:57:29  vfrolov
 * Added ignoring the case of the params
 *
 * Revision 1.3  2008/08/28 10:24:35  vfrolov
 * Removed linking with ....utils.h and ....utils.cpp
 *
 * Revision 1.2  2008/04/07 12:28:03  vfrolov
 * Replaced --rt-events option by SET_RT_EVENTS message
 *
 * Revision 1.1  2008/03/26 08:44:13  vfrolov
 * Redesigned for using plugins
 *
 * Revision 1.4  2007/05/14 12:06:37  vfrolov
 * Added read interval timeout option
 *
 * Revision 1.3  2007/02/06 11:53:33  vfrolov
 * Added options --odsr, --ox, --ix and --idsr
 * Added communications error reporting
 *
 * Revision 1.2  2007/02/01 12:14:59  vfrolov
 * Redesigned COM port params
 *
 * Revision 1.1  2007/01/23 09:13:10  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"
///////////////////////////////////////////////////////////////
namespace PortSerial {
///////////////////////////////////////////////////////////////
#include "comparams.h"
///////////////////////////////////////////////////////////////
ComParams::ComParams()
  : baudRate(CBR_19200)
  , byteSize(8)
  , parity(NOPARITY)
  , stopBits(ONESTOPBIT)
  , outCts(1)
  , outDsr(0)
  , outX(0)
  , inX(0)
  , inDsr(0)
  , intervalTimeout(0)
  , writeQueueLimit(256)
  , shareMode(0)
{
}

BOOL ComParams::SetBaudRate(const char *pBaudRate)
{
  if (tolower((unsigned char)*pBaudRate) == 'c') {
    baudRate = -1;
    return TRUE;
  }

  if (isdigit((unsigned char)*pBaudRate)) {
    baudRate = atol(pBaudRate);
    return TRUE;
  }

  return FALSE;
}

BOOL ComParams::SetByteSize(const char *pByteSize)
{
  if (tolower((unsigned char)*pByteSize) == 'c') {
    byteSize = -1;
    return TRUE;
  }

  if (isdigit((unsigned char)*pByteSize)) {
    byteSize = atoi(pByteSize);
    return TRUE;
  }

  return FALSE;
}

BOOL ComParams::SetParity(const char *pParity)
{
  switch (tolower((unsigned char)*pParity)) {
    case 'n': parity = NOPARITY; break;
    case 'o': parity = ODDPARITY; break;
    case 'e': parity = EVENPARITY; break;
    case 'm': parity = MARKPARITY; break;
    case 's': parity = SPACEPARITY; break;
    case 'c': parity = -1; break;
    default : return FALSE;
  }
  return TRUE;
}

BOOL ComParams::SetStopBits(const char *pStopBits)
{
  switch (tolower((unsigned char)*pStopBits)) {
    case '1':
      if ((pStopBits[1] == '.' || pStopBits[1] == ',') && pStopBits[2] == '5')
        stopBits = ONE5STOPBITS;
      else
        stopBits = ONESTOPBIT;
      break;
    case '2': stopBits = TWOSTOPBITS; break;
    case 'c': stopBits = -1; break;
    default : return FALSE;
  }
  return TRUE;
}

BOOL ComParams::SetIntervalTimeout(const char *pIntervalTimeout)
{
  if (isdigit((unsigned char)*pIntervalTimeout)) {
    intervalTimeout = atol(pIntervalTimeout);
    return TRUE;
  }

  return FALSE;
}

BOOL ComParams::SetWriteQueueLimit(const char *pWriteQueueLimit)
{
  if (isdigit((unsigned char)*pWriteQueueLimit)) {
    writeQueueLimit = atol(pWriteQueueLimit);
    return writeQueueLimit >= 0;
  }

  return FALSE;
}

BOOL ComParams::SetFlag(const char *pFlagStr, int *pFlag, BOOL withCurrent)
{
  if (_stricmp(pFlagStr, "on") == 0) {
    *pFlag = 1;
  }
  else
  if (_stricmp(pFlagStr, "off") == 0) {
    *pFlag = 0;
  }
  else
  if (withCurrent && tolower((unsigned char)*pFlagStr) == 'c') {
    *pFlag = -1;
  }
  else
    return FALSE;

  return TRUE;
}
///////////////////////////////////////////////////////////////
string ComParams::BaudRateStr(long baudRate)
{
  if (baudRate >= 0) {
    stringstream buf;
    buf << baudRate;
    return buf.str();
  }

  return baudRate == -1 ? "current" : "?";
}

string ComParams::ByteSizeStr(int byteSize)
{
  if (byteSize >= 0) {
    stringstream buf;
    buf << byteSize;
    return buf.str();
  }

  return byteSize == -1 ? "current" : "?";
}

string ComParams::ParityStr(int parity)
{
  switch (parity) {
    case NOPARITY: return "no";
    case ODDPARITY: return "odd";
    case EVENPARITY: return "even";
    case MARKPARITY: return "mark";
    case SPACEPARITY: return "space";
    case -1: return "current";
  }
  return "?";
}

string ComParams::StopBitsStr(int stopBits)
{
  switch (stopBits) {
    case ONESTOPBIT: return "1";
    case ONE5STOPBITS: return "1.5";
    case TWOSTOPBITS: return "2";
    case -1: return "current";
  }
  return "?";
}

string ComParams::IntervalTimeoutStr(long intervalTimeout)
{
  if (intervalTimeout > 0) {
    stringstream buf;
    buf << intervalTimeout;
    return buf.str();
  }

  return "0";
}

string ComParams::WriteQueueLimitStr(long writeQueueLimit)
{
  if (writeQueueLimit >= 0) {
    stringstream buf;
    buf << writeQueueLimit;
    return buf.str();
  }

  return "?";
}

string ComParams::FlagStr(int flag, BOOL withCurrent)
{
  switch (flag) {
    case 1: return "on";
    case 0: return "off";
    case -1: return withCurrent ? "current" : "?";
  }
  return "?";
}
///////////////////////////////////////////////////////////////
const char *ComParams::BaudRateLst()
{
  return "a positive number or c[urrent]";
}

const char *ComParams::ByteSizeLst()
{
  return "a positive number or c[urrent]";
}

const char *ComParams::ParityLst()
{
  return "n[o], o[dd], e[ven], m[ark], s[pace] or c[urrent]";
}

const char *ComParams::StopBitsLst()
{
  return "1, 1.5, 2 or c[urrent]";
}

const char *ComParams::IntervalTimeoutLst()
{
  return "a positive number or 0 milliseconds";
}

const char *ComParams::WriteQueueLimitLst()
{
  return "a positive number or 0";
}

const char *ComParams::FlagLst(BOOL withCurrent)
{
  return withCurrent ? "on, off or c[urrent]" : "on or off";
}
///////////////////////////////////////////////////////////////
} // end namespace
///////////////////////////////////////////////////////////////
@


1.8
log
@Implemented --write-limit=0 to disable writing to the port
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.7 2009/03/06 07:56:28 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2010 Vyacheslav Frolov
d22 3
d68 12
a79 11
  : baudRate(CBR_19200),
    byteSize(8),
    parity(NOPARITY),
    stopBits(ONESTOPBIT),
    outCts(1),
    outDsr(0),
    outX(0),
    inX(0),
    inDsr(0),
    intervalTimeout(0),
    writeQueueLimit(256)
d163 1
a163 1
BOOL ComParams::SetFlag(const char *pFlagStr, int *pFlag)
d173 1
a173 1
  if (tolower((unsigned char)*pFlagStr) == 'c') {
d250 1
a250 1
string ComParams::FlagStr(int flag)
d255 1
a255 1
    case -1: return "current";
d290 1
a290 1
const char *ComParams::FlagLst()
d292 1
a292 1
  return "on, off or c[urrent]";
@


1.7
log
@Fixed assertion with non ascii chars
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.6 2008/11/27 13:44:52 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2009 Vyacheslav Frolov
d22 3
d153 1
a153 1
    return writeQueueLimit > 0;
d237 1
a237 1
  if (writeQueueLimit > 0) {
d283 1
a283 1
  return "a positive number";
@


1.6
log
@Added --write-limit option
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.5 2008/11/13 07:35:10 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2008 Vyacheslav Frolov
d22 3
d78 1
a78 1
  if (tolower(*pBaudRate) == 'c') {
d83 1
a83 1
  if (isdigit(*pBaudRate)) {
d93 1
a93 1
  if (tolower(*pByteSize) == 'c') {
d98 1
a98 1
  if (isdigit(*pByteSize)) {
d108 1
a108 1
  switch (tolower(*pParity)) {
d122 1
a122 1
  switch (tolower(*pStopBits)) {
d138 1
a138 1
  if (isdigit(*pIntervalTimeout)) {
d148 1
a148 1
  if (isdigit(*pWriteQueueLimit)) {
d166 1
a166 1
  if (tolower(*pFlagStr) == 'c') {
@


1.5
log
@Changed for staticaly linking
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.4 2008/10/16 06:57:29 vfrolov Exp $
d22 3
d68 2
a69 1
    intervalTimeout(0)
d143 10
d229 11
d275 5
@


1.4
log
@Added ignoring the case of the params
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.3 2008/08/28 10:24:35 vfrolov Exp $
d22 3
d50 3
a53 1

d255 2
@


1.3
log
@Removed linking with ....utils.h and ....utils.cpp
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.2 2008/04/07 12:28:03 vfrolov Exp $
d22 3
a49 12
static struct {
  DWORD val;
  const char *pName;
} event_names[] = {
  {EV_CTS,   "cts"},
  {EV_DSR,   "dsr"},
  {EV_RLSD,  "dcd"},
  {EV_RING,  "ring"},
  {EV_BREAK, "break"},
  {EV_ERR,   "err"},
};
///////////////////////////////////////////////////////////////
d66 1
a66 1
  if (*pBaudRate == 'c') {
d81 1
a81 1
  if (*pByteSize == 'c') {
d96 1
a96 1
  switch (*pParity) {
d110 1
a110 1
  switch (*pStopBits) {
d144 1
a144 1
  if (*pFlagStr == 'c') {
@


1.2
log
@Replaced --rt-events option by SET_RT_EVENTS message
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.1 2008/03/26 08:44:13 vfrolov Exp $
d22 3
a40 1
 *
a44 1
#include "../../utils.h"
@


1.1
log
@Redesigned for using plugins
@
text
@d2 1
a2 1
 * $Id: comparams.cpp,v 1.4 2007/05/14 12:06:37 vfrolov Exp $
d22 3
d68 1
a68 2
    intervalTimeout(0),
    events(0)
a141 38
BOOL ComParams::SetEvents(const char *pEvents)
{
  char *pTmp = _strdup(pEvents);

  if (!pTmp) {
    cerr << "No enough memory." << endl;
    exit(2);
  }

  events = 0;

  char *pSave;

  for (char *pName = STRTOK_R(pTmp, ",", &pSave) ;
       pName ;
       pName = STRTOK_R(NULL, ",", &pSave))
  {
    BOOL found = FALSE;

    for (int i = 0 ; i < sizeof(event_names)/sizeof(event_names[0]) ; i++) {
      if (_stricmp(pName, event_names[i].pName) == 0) {
        events |= event_names[i].val;
        found = TRUE;
        break;
      }
    }

    if (!found && _stricmp(pName, "none") != 0) {
      free(pTmp);
      return FALSE;
    }
  }

  free(pTmp);

  return TRUE;
}

a217 23
string ComParams::EventsStr(DWORD events)
{
  if (events > 0) {
    stringstream buf;
    BOOL first = TRUE;

    for (int i = 0 ; i < sizeof(event_names)/sizeof(event_names[0]) ; i++) {
      if ((events & event_names[i].val) != 0) {
        if (first)
          first = FALSE;
        else
          buf << ",";

        buf << event_names[i].pName;
      }
    }

    return buf.str();
  }

  return "none";
}

a252 5
const char *ComParams::EventsLst()
{
  return "<E1>[,<E2>...], where <En> is cts, dsr, dcd, ring, break, err or none";
}

@

