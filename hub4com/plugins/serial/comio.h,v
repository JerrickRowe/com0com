head	1.12;
access;
symbols
	v2_1_0_0:1.12
	v2_0_1_0:1.11
	RELEASED:1.12
	v2_0_0_0:1.11;
locks; strict;
comment	@ * @;


1.12
date	2011.07.27.17.08.33;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.17.11.52.35;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.01.17.06.29;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.13.07.35.10;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.22.08.27.26;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.30.08.28.32;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.22.16.57.12;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.20.14.30.19;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.14.15.19.07;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.11.07.15.34;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.07.12.28.03;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.26.08.43.50;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Implemented serial port share mode
@
text
@/*
 * $Id: comio.h,v 1.11 2008/12/17 11:52:35 vfrolov Exp $
 *
 * Copyright (c) 2006-2011 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: comio.h,v $
 * Revision 1.11  2008/12/17 11:52:35  vfrolov
 * Replaced ComIo::dcb by serialBaudRate, serialLineControl,
 * serialHandFlow and serialChars
 * Replaced ComPort::filterX by ComIo::FilterX()
 * Replaced SetManual*() by PinStateControlMask()
 *
 * Revision 1.10  2008/12/01 17:06:29  vfrolov
 * Improved write buffering
 *
 * Revision 1.9  2008/11/13 07:35:10  vfrolov
 * Changed for staticaly linking
 *
 * Revision 1.8  2008/10/22 08:27:26  vfrolov
 * Added ability to set bytesize, parity and stopbits separately
 *
 * Revision 1.7  2008/09/30 08:28:32  vfrolov
 * Added ability to control OUT1 and OUT2 pins
 * Added ability to get remote baud rate and line control settings
 * Added ability to set baud rate and line control
 * Added fallback to non escape mode
 *
 * Revision 1.6  2008/08/22 16:57:12  vfrolov
 * Added
 *   HUB_MSG_TYPE_GET_ESC_OPTS
 *   HUB_MSG_TYPE_FAIL_ESC_OPTS
 *   HUB_MSG_TYPE_BREAK_STATUS
 *
 * Revision 1.5  2008/08/20 14:30:19  vfrolov
 * Redesigned serial port options
 *
 * Revision 1.4  2008/08/14 15:19:07  vfrolov
 * Execute OnCommEvent() in main thread context
 *
 * Revision 1.3  2008/08/11 07:15:34  vfrolov
 * Replaced
 *   HUB_MSG_TYPE_COM_FUNCTION
 *   HUB_MSG_TYPE_INIT_LSR_MASK
 *   HUB_MSG_TYPE_INIT_MST_MASK
 * by
 *   HUB_MSG_TYPE_SET_PIN_STATE
 *   HUB_MSG_TYPE_GET_OPTIONS
 *   HUB_MSG_TYPE_SET_OPTIONS
 *
 * Revision 1.2  2008/04/07 12:28:03  vfrolov
 * Replaced --rt-events option by SET_RT_EVENTS message
 *
 * Revision 1.1  2008/03/26 08:43:50  vfrolov
 * Redesigned for using plugins
 *
 * Revision 1.3  2007/02/06 11:53:33  vfrolov
 * Added options --odsr, --ox, --ix and --idsr
 * Added communications error reporting
 *
 * Revision 1.2  2007/02/05 09:33:20  vfrolov
 * Implemented internal flow control
 *
 * Revision 1.1  2007/01/23 09:13:10  vfrolov
 * Initial revision
 *
 */

#ifndef _COMIO_H
#define _COMIO_H

///////////////////////////////////////////////////////////////
class ComPort;
class ComParams;
///////////////////////////////////////////////////////////////
struct SERIAL_BAUD_RATE {
  ULONG BaudRate;
};
///////////////////////////////////////////////////////////////
struct SERIAL_LINE_CONTROL {
  UCHAR StopBits;
  UCHAR Parity;
  UCHAR WordLength;
};
///////////////////////////////////////////////////////////////
struct SERIAL_HANDFLOW {
  ULONG ControlHandShake;

#define SERIAL_DTR_MASK           ((ULONG)0x03)
#define SERIAL_DTR_CONTROL        ((ULONG)0x01)
#define SERIAL_DTR_HANDSHAKE      ((ULONG)0x02)

#define SERIAL_CTS_HANDSHAKE      ((ULONG)0x08)
#define SERIAL_DSR_HANDSHAKE      ((ULONG)0x10)
#define SERIAL_DCD_HANDSHAKE      ((ULONG)0x20)
#define SERIAL_DSR_SENSITIVITY    ((ULONG)0x40)
#define SERIAL_ERROR_ABORT        ((ULONG)0x80000000)

  ULONG FlowReplace;

#define SERIAL_AUTO_TRANSMIT      ((ULONG)0x01)
#define SERIAL_AUTO_RECEIVE       ((ULONG)0x02)
#define SERIAL_ERROR_CHAR         ((ULONG)0x04)
#define SERIAL_NULL_STRIPPING     ((ULONG)0x08)
#define SERIAL_BREAK_CHAR         ((ULONG)0x10)

#define SERIAL_RTS_MASK           ((ULONG)0xc0)
#define SERIAL_RTS_CONTROL        ((ULONG)0x40)
#define SERIAL_RTS_HANDSHAKE      ((ULONG)0x80)
#define SERIAL_TRANSMIT_TOGGLE    ((ULONG)0xc0)

#define SERIAL_XOFF_CONTINUE      ((ULONG)0x80000000)

  LONG XonLimit;
  LONG XoffLimit;
};

inline BOOL IsManualDtr(const SERIAL_HANDFLOW &serialHandFlow)
{
  ULONG val = serialHandFlow.ControlHandShake & SERIAL_DTR_MASK;

  return (val == 0 || val == SERIAL_DTR_CONTROL);
}

inline void SetHandFlowDtr(SERIAL_HANDFLOW &serialHandFlow, ULONG val)
{
  _ASSERTE((val & ~SERIAL_DTR_MASK) == 0);

  serialHandFlow.ControlHandShake &= ~SERIAL_DTR_MASK;
  serialHandFlow.ControlHandShake |= val;
}

inline BOOL IsManualRts(const SERIAL_HANDFLOW &serialHandFlow)
{
  ULONG val = serialHandFlow.FlowReplace & SERIAL_RTS_MASK;

  return (val == 0 || val == SERIAL_RTS_CONTROL);
}

inline void SetHandFlowRts(SERIAL_HANDFLOW &serialHandFlow, ULONG val)
{
  _ASSERTE((val & ~SERIAL_RTS_MASK) == 0);

  serialHandFlow.FlowReplace &= ~SERIAL_RTS_MASK;
  serialHandFlow.FlowReplace |= val;
}
///////////////////////////////////////////////////////////////
struct SERIAL_CHARS {
  UCHAR EofChar;
  UCHAR ErrorChar;
  UCHAR BreakChar;
  UCHAR EventChar;
  UCHAR XonChar;
  UCHAR XoffChar;
};
///////////////////////////////////////////////////////////////
class ComIo
{
  public:
    ComIo(ComPort &_port, const char *pPath)
      : port(_port)
      , countStartedOverlaps(0)
      , path(pPath)
      , handle(INVALID_HANDLE_VALUE)
      , handleClosing(INVALID_HANDLE_VALUE)
      , notifyOnFree(FALSE)
      , hasExtendedModemControl(FALSE)
      , pinStateValue(0)
      , pinStateMask(0)
    {
    }

    BOOL Open(const ComParams &comParams);
    BOOL Open();
    void Close();

    WORD PinStateControlMask() const {
      return PIN_STATE_RTS|
             PIN_STATE_DTR|
             (hasExtendedModemControl ? PIN_STATE_OUT1|PIN_STATE_OUT2 : 0);
    }

    BOOL FilterX(BYTE &xOn, BYTE &xOff) const {
      if ((serialHandFlow.FlowReplace & SERIAL_AUTO_RECEIVE) == 0)
        return FALSE;

      xOn = serialChars.XonChar;
      xOff = serialChars.XoffChar;

      return TRUE;
    }

    BOOL SetComEvents(DWORD *pEvents);
    void SetPinState(WORD value, WORD mask);
    DWORD SetBaudRate(DWORD baudRate);
    DWORD SetLineControl(DWORD lineControl);
    DWORD SetEscMode(DWORD escOptions, BYTE **ppBuf, DWORD *pDone);
    void PurgeWrite() { ::PurgeComm(handle, PURGE_TXABORT|PURGE_TXCLEAR); }

    HANDLE Handle() const { return handle; }
    const string &Path() const { return path; }
    DWORD BaudRate() const { return serialBaudRate.BaudRate; }
    DWORD LineControl() const {
      return (VAL2LC_BYTESIZE(serialLineControl.WordLength)
             |LC_MASK_BYTESIZE
             |VAL2LC_PARITY(serialLineControl.Parity)
             |LC_MASK_PARITY
             |VAL2LC_STOPBITS(serialLineControl.StopBits)
             |LC_MASK_STOPBITS);
    }

  public:
    ComPort &port;
    int countStartedOverlaps;

  private:
    BOOL OpenPath();
    void PrintParams(const char *pPrefix, const char *pSuffix);

    string path;

    HANDLE handle;
    HANDLE handleClosing;
    BOOL notifyOnFree;

    BOOL hasExtendedModemControl;

    WORD pinStateValue;
    WORD pinStateMask;

    SERIAL_BAUD_RATE serialBaudRate;
    SERIAL_LINE_CONTROL serialLineControl;
    SERIAL_HANDFLOW serialHandFlow;
    SERIAL_CHARS serialChars;
    COMMTIMEOUTS timeouts;

#ifdef _DEBUG
  private:
    ComIo(const ComIo &comIo) : port(comIo.port) {}
    ~ComIo() {}
    void operator=(const ComIo &) {}
#endif  /* _DEBUG */
};
///////////////////////////////////////////////////////////////
class ReadOverlapped : private OVERLAPPED
{
  public:
    ReadOverlapped(ComIo &_comIo);
    ~ReadOverlapped();
    BOOL StartRead();

  private:
    static VOID CALLBACK OnRead(
        DWORD err,
        DWORD done,
        LPOVERLAPPED pOverlapped);

    ComIo &comIo;
    BYTE *pBuf;
};
///////////////////////////////////////////////////////////////
class WriteOverlapped : private OVERLAPPED
{
  public:
    WriteOverlapped(ComIo &_comIo) : comIo(_comIo) {
#ifdef _DEBUG
      pBuf = NULL;
#endif
    }
#ifdef _DEBUG
    ~WriteOverlapped() {
      _ASSERTE(pBuf == NULL);
    }
#endif

    BOOL StartWrite(BYTE *_pBuf, DWORD _len);

  private:
    static VOID CALLBACK OnWrite(
      DWORD err,
      DWORD done,
      LPOVERLAPPED pOverlapped);
    void BufFree();

    ComIo &comIo;
    BYTE *pBuf;
    DWORD len;
};
///////////////////////////////////////////////////////////////
class SafeDelete
{
  protected:
    SafeDelete() : deleted(FALSE), locked(0) {}

    virtual ~SafeDelete() {}

    void Delete() {
      _ASSERTE(locked >= 0);

      if (locked <= 0)
        delete this;
      else
        deleted = TRUE;
    }

    void LockDelete() { locked++; }
    BOOL UnockDelete() {
      locked--;

      _ASSERTE(locked >= 0);

      if (deleted) {
        if (locked <= 0)
          delete this;

        return FALSE;
      }

      return TRUE;
    }

  private:
    BOOL deleted;
    int locked;
};
///////////////////////////////////////////////////////////////
class WaitCommEventOverlapped : private OVERLAPPED, public SafeDelete
{
  public:
    WaitCommEventOverlapped(ComIo &_comIo);
    void Delete();
    BOOL StartWaitCommEvent();

  private:
    static VOID CALLBACK OnCommEvent(
      PVOID pParameter,
      BOOLEAN timerOrWaitFired);
    static VOID CALLBACK OnCommEvent(ULONG_PTR pOverlapped);

    ComIo &comIo;
    HANDLE hWait;
    DWORD eMask;

#ifdef _DEBUG
  private:
    ~WaitCommEventOverlapped() {}
#endif  /* _DEBUG */
};
///////////////////////////////////////////////////////////////

#endif  // _COMIO_H
@


1.11
log
@Replaced ComIo::dcb by serialBaudRate, serialLineControl,
serialHandFlow and serialChars
Replaced ComPort::filterX by ComIo::FilterX()
Replaced SetManual*() by PinStateControlMask()
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.10 2008/12/01 17:06:29 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2006-2008 Vyacheslav Frolov
d22 6
d174 12
a185 2
    ComIo(ComPort &_port) : port(_port), handle(INVALID_HANDLE_VALUE) {}
    ~ComIo() { Close(); }
d187 2
a188 1
    BOOL Open(const char *pPath, const ComParams &comParams);
d215 1
d228 1
d231 5
d237 3
d241 4
d249 8
d279 5
a284 1
    WriteOverlapped() : pBuf(NULL) {}
d290 1
a290 1
    BOOL StartWrite(ComIo *_pComIo, BYTE *_pBuf, DWORD _len);
d299 1
a299 1
    ComIo *pComIo;
d304 38
a341 1
class WaitCommEventOverlapped : private OVERLAPPED
d345 1
a345 1
    ~WaitCommEventOverlapped();
d357 5
@


1.10
log
@Improved write buffering
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.9 2008/11/13 07:35:10 vfrolov Exp $
d22 3
d84 81
d174 16
a189 4
    BOOL SetManualRtsControl();
    BOOL SetManualDtrControl();
    BOOL SetManualOut1Control() { return hasExtendedModemControl; }
    BOOL SetManualOut2Control() { return hasExtendedModemControl; }
d198 3
a200 3
    DWORD GetBaudRate() const { return dcb.BaudRate; }
    DWORD GetLineControl() const {
      return (VAL2LC_BYTESIZE(dcb.ByteSize)
d202 1
a202 1
             |VAL2LC_PARITY(dcb.Parity)
d204 1
a204 1
             |VAL2LC_STOPBITS(dcb.StopBits)
d214 4
a217 1
    DCB dcb;
@


1.9
log
@Changed for staticaly linking
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.8 2008/10/22 08:27:26 vfrolov Exp $
d22 3
d141 8
a148 3
    WriteOverlapped(ComIo &_comIo, BYTE *_pBuf, DWORD _len);
    ~WriteOverlapped();
    BOOL StartWrite();
d155 1
d157 1
a157 1
    ComIo &comIo;
@


1.8
log
@Added ability to set bytesize, parity and stopbits separately
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.7 2008/09/30 08:28:32 vfrolov Exp $
d22 3
a73 2
#include "../plugins_api.h"

@


1.7
log
@Added ability to control OUT1 and OUT2 pins
Added ability to get remote baud rate and line control settings
Added ability to set baud rate and line control
Added fallback to non escape mode
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.6 2008/08/22 16:57:12 vfrolov Exp $
d22 6
d101 1
d103 3
a105 1
             |VAL2LC_STOPBITS(dcb.StopBits));
@


1.6
log
@Added
  HUB_MSG_TYPE_GET_ESC_OPTS
  HUB_MSG_TYPE_FAIL_ESC_OPTS
  HUB_MSG_TYPE_BREAK_STATUS
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.5 2008/08/20 14:30:19 vfrolov Exp $
d22 6
d65 2
d71 36
a106 6
extern HANDLE OpenComPort(const char *pPath, const ComParams &comParams);
extern BOOL SetManualRtsControl(HANDLE handle);
extern BOOL SetManualDtrControl(HANDLE handle);
extern BOOL SetComEvents(HANDLE handle, DWORD *events);
extern BOOL CommFunction(HANDLE handle, DWORD func);
extern DWORD SetEscMode(HANDLE handle, DWORD escOptions, BYTE **ppBuf, DWORD *pDone);
d111 1
a111 1
    ReadOverlapped(ComPort &_port);
d121 1
a121 1
    ComPort &port;
d128 1
a128 1
    WriteOverlapped(ComPort &_port, BYTE *_pBuf, DWORD _len);
d138 1
a138 1
    ComPort &port;
d146 1
a146 1
    WaitCommEventOverlapped(ComPort &_port);
d156 1
a156 1
    ComPort &port;
@


1.5
log
@Redesigned serial port options
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.4 2008/08/14 15:19:07 vfrolov Exp $
d22 3
d68 1
a68 1
extern DWORD SetEscMode(HANDLE handle, DWORD options, BYTE escapeChar, BYTE **ppBuf, DWORD *pDone);
@


1.4
log
@Execute OnCommEvent() in main thread context
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.3 2008/08/11 07:15:34 vfrolov Exp $
d22 3
d65 1
@


1.3
log
@Replaced
  HUB_MSG_TYPE_COM_FUNCTION
  HUB_MSG_TYPE_INIT_LSR_MASK
  HUB_MSG_TYPE_INIT_MST_MASK
by
  HUB_MSG_TYPE_SET_PIN_STATE
  HUB_MSG_TYPE_GET_OPTIONS
  HUB_MSG_TYPE_SET_OPTIONS
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.2 2008/04/07 12:28:03 vfrolov Exp $
d22 10
d109 1
@


1.2
log
@Replaced --rt-events option by SET_RT_EVENTS message
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.1 2008/03/26 08:43:50 vfrolov Exp $
d22 3
d48 2
d51 1
@


1.1
log
@Redesigned for using plugins
@
text
@d2 1
a2 1
 * $Id: comio.h,v 1.3 2007/02/06 11:53:33 vfrolov Exp $
d22 3
d45 1
@

