head	1.15;
access;
symbols
	v2_1_0_0:1.15
	v2_0_1_0:1.15
	RELEASED:1.15
	v2_0_0_0:1.15;
locks; strict;
comment	@// @;


1.15
date	2009.02.20.18.32.35;	author vfrolov;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.17.14.17.36;	author vfrolov;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.04.15.41.15;	author vfrolov;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.02.15.21.42;	author vfrolov;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.26.14.55.29;	author vfrolov;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.23.16.48.49;	author vfrolov;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.19.18.23.05;	author vfrolov;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.27.16.19.16;	author vfrolov;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.24.16.30.56;	author vfrolov;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.24.12.46.16;	author vfrolov;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.13.08.07.40;	author vfrolov;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.16.09.24.23;	author vfrolov;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.20.09.06.48;	author vfrolov;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.19.16.45.27;	author vfrolov;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.26.08.35.03;	author vfrolov;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Added info about location of options
@
text
@/*
 * $Id: export.cpp,v 1.14 2009/02/17 14:17:36 vfrolov Exp $
 *
 * Copyright (c) 2008-2009 Vyacheslav Frolov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * $Log: export.cpp,v $
 * Revision 1.14  2009/02/17 14:17:36  vfrolov
 * Redesigned timer's API
 *
 * Revision 1.13  2009/02/04 15:41:15  vfrolov
 * Added pGetFilter()
 *
 * Revision 1.12  2009/02/02 15:21:42  vfrolov
 * Optimized filter's API
 *
 * Revision 1.11  2009/01/26 14:55:29  vfrolov
 * Added signature checking for Timer
 *
 * Revision 1.10  2009/01/23 16:48:49  vfrolov
 * Exported timer routines
 *
 * Revision 1.9  2008/12/19 18:23:05  vfrolov
 * Changed message type to 32 bit
 *
 * Revision 1.8  2008/11/27 16:19:16  vfrolov
 * Added pBufAppend()
 *
 * Revision 1.7  2008/11/24 16:30:56  vfrolov
 * Removed pOnXoffXon
 *
 * Revision 1.6  2008/11/24 12:46:16  vfrolov
 * Changed plugin API
 *
 * Revision 1.5  2008/11/13 08:07:40  vfrolov
 * Changed for staticaly linking
 *
 * Revision 1.4  2008/10/16 09:24:23  vfrolov
 * Changed return type of ROUTINE_MSG_REPLACE_*() to BOOL
 *
 * Revision 1.3  2008/08/20 09:06:48  vfrolov
 * Added HUB_ROUTINES_A::pFilterName
 *
 * Revision 1.2  2008/08/19 16:45:27  vfrolov
 * Added missing size setting to msg_insert_buf()
 *
 * Revision 1.1  2008/03/26 08:35:03  vfrolov
 * Initial revision
 *
 */

#include "precomp.h"
#include "plugins/plugins_api.h"

#include "export.h"
#include "port.h"
#include "comhub.h"
#include "bufutils.h"
#include "hubmsg.h"
#include "filter.h"
#include "timer.h"
#include "utils.h"

///////////////////////////////////////////////////////////////
static BYTE * CALLBACK buf_alloc(DWORD size)
{
  return BufAlloc(size);
}
///////////////////////////////////////////////////////////////
static VOID CALLBACK buf_free(BYTE *pBuf)
{
  BufFree(pBuf);
}
///////////////////////////////////////////////////////////////
static VOID CALLBACK buf_append(BYTE **ppBuf, DWORD offset, const BYTE *pSrc, DWORD sizeSrc)
{
  BufAppend(ppBuf, offset, pSrc, sizeSrc);
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK msg_replace_buf(HUB_MSG *pMsg, DWORD type, const BYTE *pSrc, DWORD sizeSrc)
{
  _ASSERTE((type & HUB_MSG_UNION_TYPES_MASK) == HUB_MSG_UNION_TYPE_BUF);

  if (!pMsg)
    return FALSE;

  if ((pMsg->type & HUB_MSG_UNION_TYPES_MASK) != HUB_MSG_UNION_TYPE_BUF)
    ((HubMsg *)pMsg)->Clean();

  BufAppend(&pMsg->u.buf.pBuf, 0, pSrc, sizeSrc);

  if (!pMsg->u.buf.pBuf && sizeSrc) {
    ((HubMsg *)pMsg)->Clean();
    return FALSE;
  }

  pMsg->u.buf.size = sizeSrc;
  pMsg->type = type;

  return TRUE;
}
///////////////////////////////////////////////////////////////
static HUB_MSG *CALLBACK msg_insert_buf(HUB_MSG *pPrevMsg, DWORD type, const BYTE *pSrc, DWORD sizeSrc)
{
  _ASSERTE((type & HUB_MSG_UNION_TYPES_MASK) == HUB_MSG_UNION_TYPE_BUF);

  if (pPrevMsg && pPrevMsg->type == type) {
    BufAppend(&pPrevMsg->u.buf.pBuf, pPrevMsg->u.buf.size, pSrc, sizeSrc);
    pPrevMsg->u.buf.size += sizeSrc;
    return pPrevMsg;
  }

  HubMsg *pMsg = new HubMsg();

  if (!pMsg) {
    cerr << "No enough memory." << endl;
    return NULL;
  }

  if (sizeSrc) {
    BufAppend(&pMsg->u.buf.pBuf, 0, pSrc, sizeSrc);

    if (!pMsg->u.buf.pBuf) {
      delete pMsg;
      return NULL;
    }
  }

  pMsg->u.buf.size = sizeSrc;
  pMsg->type = type;

  if (pPrevMsg)
    pMsg->Insert((HubMsg *)pPrevMsg);

  return pMsg;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK msg_replace_val(HUB_MSG *pMsg, DWORD type, DWORD val)
{
  _ASSERTE((type & HUB_MSG_UNION_TYPES_MASK) == HUB_MSG_UNION_TYPE_VAL);

  if (!pMsg)
    return FALSE;

  ((HubMsg *)pMsg)->Clean();

  pMsg->u.val = val;
  pMsg->type = type;

  return TRUE;
}
///////////////////////////////////////////////////////////////
static HUB_MSG *CALLBACK msg_insert_val(HUB_MSG *pPrevMsg, DWORD type, DWORD val)
{
  _ASSERTE((type & HUB_MSG_UNION_TYPES_MASK) == HUB_MSG_UNION_TYPE_VAL);

  HubMsg *pMsg = new HubMsg();

  if (!pMsg) {
    cerr << "No enough memory." << endl;
    return NULL;
  }

  pMsg->u.val = val;
  pMsg->type = type;

  if (pPrevMsg)
    pMsg->Insert((HubMsg *)pPrevMsg);

  return pMsg;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK msg_replace_none(HUB_MSG *pMsg, DWORD type)
{
  _ASSERTE((type & HUB_MSG_UNION_TYPES_MASK) == HUB_MSG_UNION_TYPE_NONE);

  if (!pMsg)
    return FALSE;

  ((HubMsg *)pMsg)->Clean();

  pMsg->type = type;

  return TRUE;
}
///////////////////////////////////////////////////////////////
static HUB_MSG *CALLBACK msg_insert_none(HUB_MSG *pPrevMsg, DWORD type)
{
  _ASSERTE((type & HUB_MSG_UNION_TYPES_MASK) == HUB_MSG_UNION_TYPE_NONE);

  HubMsg *pMsg = new HubMsg();

  if (!pMsg) {
    cerr << "No enough memory." << endl;
    return NULL;
  }

  pMsg->type = type;

  if (pPrevMsg)
    pMsg->Insert((HubMsg *)pPrevMsg);

  return pMsg;
}
///////////////////////////////////////////////////////////////
static const char * CALLBACK port_name(HMASTERPORT hMasterPort)
{
  _ASSERTE(hMasterPort != NULL);
  _ASSERTE(((Port *)hMasterPort)->IsValid());

  return ((Port *)hMasterPort)->Name().c_str();
}
///////////////////////////////////////////////////////////////
static const char * CALLBACK filter_name(HMASTERFILTER hMasterFilter)
{
  _ASSERTE(hMasterFilter != NULL);
  _ASSERTE(((Filter *)hMasterFilter)->IsValid());

  return ((Filter *)hMasterFilter)->Name().c_str();
}
///////////////////////////////////////////////////////////////
static void CALLBACK on_read(HMASTERPORT hMasterPort, HUB_MSG *pMsg)
{
  _ASSERTE(hMasterPort != NULL);
  _ASSERTE(((Port *)hMasterPort)->IsValid());

  HubMsg msg;

  *(HUB_MSG *)&msg = *pMsg;
  ::memset(pMsg, 0, sizeof(*pMsg));

  ((Port *)hMasterPort)->hub.OnRead((Port *)hMasterPort, &msg);
}
///////////////////////////////////////////////////////////////
static HMASTERTIMER CALLBACK timer_create(HTIMEROWNER hTimerOwner)
{
  Timer *pTimer = new Timer(hTimerOwner);

  if (!pTimer)
    cerr << "No enough memory." << endl;

  return (HMASTERTIMER)pTimer;
}
///////////////////////////////////////////////////////////////
static BOOL CALLBACK timer_set(
  HMASTERTIMER hMasterTimer,
  HMASTERPORT hMasterPort,
  const LARGE_INTEGER *pDueTime,
  LONG period,
  HTIMERPARAM hTimerParam)
{
  _ASSERTE(hMasterTimer != NULL);
  _ASSERTE(((Timer *)hMasterTimer)->IsValid());
  _ASSERTE(hMasterPort != NULL);
  _ASSERTE(((Port *)hMasterPort)->IsValid());

  return ((Timer *)hMasterTimer)->Set((Port *)hMasterPort, pDueTime, period, hTimerParam);
}
///////////////////////////////////////////////////////////////
static void CALLBACK timer_cancel(HMASTERTIMER hMasterTimer)
{
  _ASSERTE(hMasterTimer != NULL);
  _ASSERTE(((Timer *)hMasterTimer)->IsValid());

  ((Timer *)hMasterTimer)->Cancel();
}
///////////////////////////////////////////////////////////////
static void CALLBACK timer_delete(HMASTERTIMER hMasterTimer)
{
  _ASSERTE(hMasterTimer != NULL);
  _ASSERTE(((Timer *)hMasterTimer)->IsValid());

  delete ((Timer *)hMasterTimer);
}
///////////////////////////////////////////////////////////////
static HMASTERPORT CALLBACK filter_port(HMASTERFILTERINSTANCE hMasterFilterInstance)
{
  _ASSERTE(hMasterFilterInstance != NULL);
  _ASSERTE(((FilterInstance *)hMasterFilterInstance)->IsValid());

  return (HMASTERPORT)&((FilterInstance *)hMasterFilterInstance)->port;
}
///////////////////////////////////////////////////////////////
static HFILTER CALLBACK get_filter(HMASTERFILTERINSTANCE hMasterFilterInstance)
{
  _ASSERTE(hMasterFilterInstance != NULL);
  _ASSERTE(((FilterInstance *)hMasterFilterInstance)->IsValid());

  return ((FilterInstance *)hMasterFilterInstance)->HFilter();
}
///////////////////////////////////////////////////////////////
static const ARG_INFO_A * CALLBACK get_arg_info(const char *pArg)
{
  return Arg::GetArgInfo(pArg);
}
///////////////////////////////////////////////////////////////
HUB_ROUTINES_A hubRoutines = {
  sizeof(HUB_ROUTINES_A),
  buf_alloc,
  buf_free,
  buf_append,
  msg_replace_buf,
  msg_insert_buf,
  msg_replace_val,
  msg_insert_val,
  msg_replace_none,
  msg_insert_none,
  port_name,
  filter_name,
  on_read,
  timer_create,
  timer_set,
  timer_cancel,
  timer_delete,
  filter_port,
  get_filter,
  get_arg_info,
};
///////////////////////////////////////////////////////////////
@


1.14
log
@Redesigned timer's API
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.13 2009/02/04 15:41:15 vfrolov Exp $
d22 3
d76 1
d306 5
d331 1
@


1.13
log
@Added pGetFilter()
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.12 2009/02/02 15:21:42 vfrolov Exp $
d22 3
d245 1
a245 1
static HMASTERTIMER CALLBACK timer_create()
d247 1
a247 1
  Timer *pTimer = new Timer();
d259 2
a260 1
  LONG period)
d267 1
a267 1
  return ((Timer *)hMasterTimer)->Set((Port *)hMasterPort, pDueTime, period);
@


1.12
log
@Optimized filter's API
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.11 2009/01/26 14:55:29 vfrolov Exp $
d22 3
d290 8
d317 1
@


1.11
log
@Added signature checking for Timer
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.10 2009/01/23 16:48:49 vfrolov Exp $
d22 3
d223 1
a223 1
  return ((Filter *)hMasterFilter)->name.c_str();
d279 8
d305 1
@


1.10
log
@Exported timer routines
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.9 2008/12/19 18:23:05 vfrolov Exp $
d22 3
d253 1
d255 1
d263 1
d271 1
@


1.9
log
@Changed message type to 32 bit
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.8 2008/11/27 16:19:16 vfrolov Exp $
d4 1
a4 1
 * Copyright (c) 2008 Vyacheslav Frolov
d22 3
d60 1
d233 36
d283 4
@


1.8
log
@Added pBufAppend()
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.7 2008/11/24 16:30:56 vfrolov Exp $
d22 3
d74 1
a74 1
static BOOL CALLBACK msg_replace_buf(HUB_MSG *pMsg, WORD type, const BYTE *pSrc, DWORD sizeSrc)
d97 1
a97 1
static HUB_MSG *CALLBACK msg_insert_buf(HUB_MSG *pPrevMsg, WORD type, const BYTE *pSrc, DWORD sizeSrc)
d132 1
a132 1
static BOOL CALLBACK msg_replace_val(HUB_MSG *pMsg, WORD type, DWORD val)
d147 1
a147 1
static HUB_MSG *CALLBACK msg_insert_val(HUB_MSG *pPrevMsg, WORD type, DWORD val)
d167 1
a167 1
static BOOL CALLBACK msg_replace_none(HUB_MSG *pMsg, WORD type)
d181 1
a181 1
static HUB_MSG *CALLBACK msg_insert_none(HUB_MSG *pPrevMsg, WORD type)
@


1.7
log
@Removed pOnXoffXon
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.6 2008/11/24 12:46:16 vfrolov Exp $
d22 3
d66 5
d230 1
@


1.6
log
@Changed plugin API
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.5 2008/11/13 08:07:40 vfrolov Exp $
d22 3
a204 8
static void CALLBACK on_xoff_xon(HMASTERPORT hMasterPort, BOOL xoff)
{
  _ASSERTE(hMasterPort != NULL);
  _ASSERTE(((Port *)hMasterPort)->IsValid());

  ((Port *)hMasterPort)->hub.AddXoffXon((Port *)hMasterPort, xoff);
}
///////////////////////////////////////////////////////////////
a229 1
  on_xoff_xon,
@


1.5
log
@Changed for staticaly linking
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.4 2008/10/16 09:24:23 vfrolov Exp $
d22 3
d47 1
d62 1
a62 1
  _ASSERTE((type & HUB_MSG_UNION_TYPE_MASK) == HUB_MSG_UNION_TYPE_BUF);
d67 1
a67 1
  if ((pMsg->type & HUB_MSG_UNION_TYPE_MASK) != HUB_MSG_UNION_TYPE_BUF)
d85 1
a85 1
  _ASSERTE((type & HUB_MSG_UNION_TYPE_MASK) == HUB_MSG_UNION_TYPE_BUF);
d120 1
a120 1
  _ASSERTE((type & HUB_MSG_UNION_TYPE_MASK) == HUB_MSG_UNION_TYPE_VAL);
d135 1
a135 1
  _ASSERTE((type & HUB_MSG_UNION_TYPE_MASK) == HUB_MSG_UNION_TYPE_VAL);
d155 1
a155 1
  _ASSERTE((type & HUB_MSG_UNION_TYPE_MASK) == HUB_MSG_UNION_TYPE_NONE);
d169 1
a169 1
  _ASSERTE((type & HUB_MSG_UNION_TYPE_MASK) == HUB_MSG_UNION_TYPE_NONE);
d186 1
a186 1
static int CALLBACK num_ports(HHUB hHub)
d188 2
a189 12
  _ASSERTE(hHub != NULL);
  _ASSERTE(((ComHub *)hHub)->IsValid());

  return ((ComHub *)hHub)->NumPorts();
}
///////////////////////////////////////////////////////////////
static const char * CALLBACK port_name(HHUB hHub, int n)
{
  _ASSERTE(hHub != NULL);
  _ASSERTE(((ComHub *)hHub)->IsValid());

  Port *pPort = ((ComHub *)hHub)->GetPort(n);
d191 1
a191 12
  if (!pPort)
    return NULL;

  return pPort->Name().c_str();
}
///////////////////////////////////////////////////////////////
static const char * CALLBACK filter_name(HHUB hHub, HFILTER hFilter)
{
  _ASSERTE(hHub != NULL);
  _ASSERTE(((ComHub *)hHub)->IsValid());

  return ((ComHub *)hHub)->FilterName(hFilter);
d194 1
a194 1
static void CALLBACK on_xoff(HHUB hHub, HMASTERPORT hMasterPort)
d196 2
a197 4
  _ASSERTE(hHub != NULL);
  _ASSERTE(((ComHub *)hHub)->IsValid());
  _ASSERTE(hMasterPort != NULL);
  _ASSERTE(((Port *)hMasterPort)->IsValid());
d199 1
a199 1
  ((ComHub *)hHub)->AddXoff((Port *)hMasterPort);
d202 1
a202 1
static void CALLBACK on_xon(HHUB hHub, HMASTERPORT hMasterPort)
a203 2
  _ASSERTE(hHub != NULL);
  _ASSERTE(((ComHub *)hHub)->IsValid());
d207 1
a207 1
  ((ComHub *)hHub)->AddXon((Port *)hMasterPort);
d210 1
a210 1
static void CALLBACK on_read(HHUB hHub, HMASTERPORT hMasterPort, HUB_MSG *pMsg)
a211 2
  _ASSERTE(hHub != NULL);
  _ASSERTE(((ComHub *)hHub)->IsValid());
d220 1
a220 1
  ((ComHub *)hHub)->OnRead((Port *)hMasterPort, &msg);
a232 1
  num_ports,
d235 1
a235 2
  on_xoff,
  on_xon,
@


1.4
log
@Changed return type of ROUTINE_MSG_REPLACE_*() to BOOL
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.3 2008/08/20 09:06:48 vfrolov Exp $
d22 3
d37 2
@


1.3
log
@Added HUB_ROUTINES_A::pFilterName
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.2 2008/08/19 16:45:27 vfrolov Exp $
d22 3
d51 1
a51 1
static HUB_MSG *CALLBACK msg_replace_buf(HUB_MSG *pMsg, WORD type, const BYTE *pSrc, DWORD sizeSrc)
d56 1
a56 1
    return NULL;
d65 1
a65 1
    return NULL;
d71 1
a71 1
  return pMsg;
d109 1
a109 1
static HUB_MSG *CALLBACK msg_replace_val(HUB_MSG *pMsg, WORD type, DWORD val)
d114 1
a114 1
    return NULL;
d121 1
a121 1
  return pMsg;
d144 1
a144 1
static HUB_MSG *CALLBACK msg_replace_none(HUB_MSG *pMsg, WORD type)
d149 1
a149 1
    return NULL;
d155 1
a155 1
  return pMsg;
@


1.2
log
@Added missing size setting to msg_insert_buf()
@
text
@d2 1
a2 1
 * $Id: export.cpp,v 1.1 2008/03/26 08:35:03 vfrolov Exp $
d22 3
d195 8
d250 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: $
d21 3
a23 1
 * $Log: $
d48 3
a50 1
  _ASSERTE(pMsg != NULL);
d74 1
d106 3
a108 1
  _ASSERTE(pMsg != NULL);
d141 3
a143 1
  _ASSERTE(pMsg != NULL);
@

